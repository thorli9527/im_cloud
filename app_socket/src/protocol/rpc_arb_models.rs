// This file is @generated by prost-build.
/// =====================
/// 通用结构体定义
/// =====================
/// 基础请求，仅包含节点地址
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BaseRequest {
    /// 节点地址（如 192.168.1.10:9000）
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    /// 节点类型
    #[prost(enumeration = "NodeType", tag = "2")]
    pub node_type: i32,
}
/// =====================
/// 通用结构体定义
/// =====================
/// 基础请求，仅包含节点地址
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryNodeReq {
    /// 节点类型
    #[prost(enumeration = "NodeType", tag = "1")]
    pub node_type: i32,
}
/// ============================
/// 分片节点元信息
/// ============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShardNodeInfo {
    /// 所属节点地址
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    /// 当前版本号（用于 CAS 检查）
    #[prost(uint64, tag = "2")]
    pub version: u64,
    /// 当前状态
    #[prost(enumeration = "ShardState", tag = "3")]
    pub state: i32,
    /// 最后更新时间戳（毫秒）
    #[prost(uint64, tag = "4")]
    pub last_update_time: u64,
    /// 分片总数
    #[prost(int32, tag = "6")]
    pub total: i32,
    /// 节点类型
    #[prost(enumeration = "NodeType", tag = "7")]
    pub node_type: i32,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemberRef {
    /// 用户ID
    #[prost(string, tag = "1")]
    pub uid: ::prost::alloc::string::String,
    /// 群组ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncListGroup {
    #[prost(string, repeated, tag = "1")]
    pub groups: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub members: ::prost::alloc::vec::Vec<MemberRef>,
}
/// ============================
/// 请求结构：更新分片状态
/// ============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateShardStateRequest {
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    #[prost(enumeration = "ShardState", tag = "2")]
    pub new_state: i32,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListShardNodesResponse {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<ShardNodeInfo>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAllNodesResponse {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<ShardNodeInfo>,
}
/// =====================
/// 枚举：分片节点状态定义
/// =====================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShardState {
    /// 默认值，表示未明确设置状态
    Unspecified = 0,
    /// 节点已注册，等待分片分配（未调度）
    Registered = 1,
    /// 分片正常运行中（已调度完成）
    Normal = 2,
    /// 正在迁移（当前节点将转出）
    Migrating = 3,
    /// 节点异常、下线、心跳失联等状态
    Failed = 4,
    /// 正在准备接管分片（目标节点）
    Preparing = 5,
    /// 接管准备完成，可切换 owner
    Ready = 6,
    /// 节点主动下线，分片不可调度
    Offline = 7,
    /// 节点准备下线，等待迁移完成
    PreparingOffline = 8,
}
impl ShardState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "UNSPECIFIED",
            Self::Registered => "REGISTERED",
            Self::Normal => "NORMAL",
            Self::Migrating => "MIGRATING",
            Self::Failed => "FAILED",
            Self::Preparing => "PREPARING",
            Self::Ready => "READY",
            Self::Offline => "OFFLINE",
            Self::PreparingOffline => "PREPARING_OFFLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED" => Some(Self::Unspecified),
            "REGISTERED" => Some(Self::Registered),
            "NORMAL" => Some(Self::Normal),
            "MIGRATING" => Some(Self::Migrating),
            "FAILED" => Some(Self::Failed),
            "PREPARING" => Some(Self::Preparing),
            "READY" => Some(Self::Ready),
            "OFFLINE" => Some(Self::Offline),
            "PREPARING_OFFLINE" => Some(Self::PreparingOffline),
            _ => None,
        }
    }
}
/// 节点类型
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NodeType {
    GroupNode = 0,
    SocketNode = 1,
}
impl NodeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GroupNode => "GROUP_NODE",
            Self::SocketNode => "SOCKET_NODE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROUP_NODE" => Some(Self::GroupNode),
            "SOCKET_NODE" => Some(Self::SocketNode),
            _ => None,
        }
    }
}
/// 同步数据请求类型
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SyncDataType {
    GroupAdd = 0,
    GroupDel = 1,
    GroupUpdate = 2,
    GroupMemberAdd = 3,
    GroupMemberDel = 4,
    GroupMemberUpdate = 5,
}
impl SyncDataType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GroupAdd => "GROUP_ADD",
            Self::GroupDel => "GROUP_DEL",
            Self::GroupUpdate => "GROUP_UPDATE",
            Self::GroupMemberAdd => "GROUP_MEMBER_ADD",
            Self::GroupMemberDel => "GROUP_MEMBER_DEL",
            Self::GroupMemberUpdate => "GROUP_MEMBER_UPDATE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROUP_ADD" => Some(Self::GroupAdd),
            "GROUP_DEL" => Some(Self::GroupDel),
            "GROUP_UPDATE" => Some(Self::GroupUpdate),
            "GROUP_MEMBER_ADD" => Some(Self::GroupMemberAdd),
            "GROUP_MEMBER_DEL" => Some(Self::GroupMemberDel),
            "GROUP_MEMBER_UPDATE" => Some(Self::GroupMemberUpdate),
            _ => None,
        }
    }
}
