use crate::kafka::kafka_consumer::*;
use crate::manager::socket_manager::{get_socket_manager, ConnectionId, ConnectionInfo, ConnectionMeta};

use common::util::common_utils::build_uuid;
use common::util::date_util::now;

use futures::{SinkExt, StreamExt};
use prost::bytes::Bytes;
use prost::Message;
use std::sync::atomic::AtomicU64;
use std::sync::Arc;

use biz_service::protocol::protocol::envelope::Payload;
use biz_service::protocol::protocol::envelope::Payload::AuthRequest;
use biz_service::protocol::protocol::message_content::Content;
use biz_service::protocol::protocol::Envelope;
use rdkafka::consumer::{CommitMode, Consumer};
use rdkafka::topic_partition_list::TopicPartitionList;
use rdkafka::Offset;
use tokio::net::TcpStream;
use tokio::sync::mpsc;
use tokio_util::codec::{FramedRead, FramedWrite, LengthDelimitedCodec};

/// Â§ÑÁêÜÊØè‰∏™ÂÆ¢Êà∑Á´ØËøûÊé•
pub async fn handle_connection(stream: TcpStream) -> anyhow::Result<()> {
    let conn_id = build_uuid();
    let (read_half, write_half) = stream.into_split();
    let mut reader = FramedRead::new(read_half, LengthDelimitedCodec::new());
    let mut writer = FramedWrite::new(write_half, LengthDelimitedCodec::new());

    let (tx, mut rx) = mpsc::unbounded_channel::<Bytes>();
    let connection = ConnectionInfo {
        meta: ConnectionMeta {
            user_id: None,
            client_id: None,
            device_type: None,
        },
        sender: tx.clone(),
        last_heartbeat: Arc::new(AtomicU64::new(now() as u64)),
    };

    let manager = get_socket_manager();
    let conn_key = ConnectionId(conn_id.clone());
    manager.insert(conn_key.clone(), connection);

    // ÂÜô‰ªªÂä°ÔºàÂèëÈÄÅÊï∞ÊçÆÂà∞ÂÆ¢Êà∑Á´ØÔºâ
    let write_task = tokio::spawn(async move {
        while let Some(msg) = rx.recv().await {
            if let Err(e) = writer.send(msg).await {
                log::warn!("üîå ÂÆ¢Êà∑Á´ØÂÜôÂÖ•Â§±Ë¥•: {:?}", e);
                break;
            }
        }
    });

    // ‰∏ªÂæ™ÁéØËØªÂèñÂÆ¢Êà∑Á´ØÊ∂àÊÅØ
    while let Some(frame) = reader.next().await {
        let bytes = frame?;

        match Envelope::decode(bytes.clone()) {
            Ok(envelope) => match envelope.payload {
                Some(AuthRequest(auth)) => {
                    log::info!("üîê Êî∂Âà∞ Auth ËØ∑Ê±Ç: token={}, client_id={}", auth.token, auth.uid);
                    // ÂèØÊâ©Â±ïË∞ÉÁî® handler Ê®°Âùó
                }

                Some(Payload::Ack(ack)) => {
                    let msg_id = &ack.message_id;
                    let pending_acks = get_pending_acks();

                    if let Some((_, pending_meta)) = pending_acks.remove(msg_id) {
                        let consumer = get_consumer().expect("Kafka Ê∂àË¥πËÄÖÊú™ÂàùÂßãÂåñ");
                        let mut tpl = TopicPartitionList::new();

                        // ÊûÑÈÄ†Ê≠£Á°ÆÁöÑ Offset Êèê‰∫§ÂØπË±°
                        if tpl.add_partition_offset(
                            &pending_meta.topic,
                            pending_meta.partition,
                            Offset::Offset(pending_meta.offset + 1)
                        ).is_ok() {
                            if let Err(e) = consumer.commit(&tpl, CommitMode::Async) {
                                log::error!("‚ùå Kafka Êèê‰∫§Â§±Ë¥• [{}]: {:?}", msg_id, e);
                            } else {
                                log::info!("‚úÖ Kafka Ê∂àÊÅØÊèê‰∫§ÊàêÂäü [{}]", msg_id);
                            }
                        } else {
                            log::warn!("‚ö†Ô∏è ÊûÑÂª∫ TopicPartitionList Â§±Ë¥• [{}]", msg_id);
                        }
                    } else {
                        log::warn!("‚ö†Ô∏è Êâæ‰∏çÂà∞ÂæÖÁ°ÆËÆ§ÁöÑÊ∂àÊÅØ [{}]", msg_id);
                    }
                }

                Some(Payload::Message(msg)) => {
                    for item in msg.contents {
                        if let Some(content) = item.content {
                            match content {
                                Content::Text(text) => {
                                    log::info!("üì® ÊñáÊú¨Ê∂àÊÅØ [{}]: {}", msg.sender_id, text.text);
                                }
                                other => {
                                    log::debug!("üì• Êî∂Âà∞ÂÖ∂‰ªñÊ∂àÊÅØÁ±ªÂûã: {:?}", other);
                                }
                            }
                        }
                    }
                }

                Some(Payload::Heartbeat(_)) => {
                    // connection.last_heartbeat.store(now() as u64, Ordering::SeqCst);
                    log::debug!("üíì ÂøÉË∑≥Êõ¥Êñ∞: {:?}", conn_id);
                }

                Some(unknown) => {
                    log::debug!("‚ö†Ô∏è Êú™Â§ÑÁêÜÁöÑÊ∂àÊÅØÁ±ªÂûã: {:?}", unknown);
                }

                None => {
                    log::warn!("‚ö†Ô∏è Êî∂Âà∞Á©∫ Payload Ê∂àÊÅØ");
                }
            },

            Err(e) => {
                log::error!("‚ùå Envelope Ëß£Á†ÅÂ§±Ë¥•: {:?}", e);
            }
        }
    }

    manager.remove(&conn_key);
    write_task.abort();
    Ok(())
}
