// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    /// 消息唯一 ID
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 发送者用户 ID
    #[prost(string, tag = "2")]
    pub sender_id: ::prost::alloc::string::String,
    /// 接收者用户 ID
    #[prost(string, tag = "3")]
    pub receiver_id: ::prost::alloc::string::String,
    /// 消息时间戳（毫秒）
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
    /// 消息类型（第一个内容的主类型，可选）
    #[prost(enumeration = "MessageType", tag = "5")]
    pub r#type: i32,
    /// 会话类型（单聊/群聊）
    #[prost(enumeration = "ChatScene", tag = "6")]
    pub scene: i32,
    /// 支持多个内容段
    #[prost(message, repeated, tag = "10")]
    pub contents: ::prost::alloc::vec::Vec<MessageContent>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageContent {
    #[prost(
        oneof = "message_content::Content",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12"
    )]
    pub content: ::core::option::Option<message_content::Content>,
}
/// Nested message and enum types in `MessageContent`.
pub mod message_content {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        /// 文本
        #[prost(message, tag = "1")]
        Text(super::TextMessage),
        /// 图片
        #[prost(message, tag = "2")]
        Image(super::ImageMessage),
        /// 音频
        #[prost(message, tag = "3")]
        Audio(super::AudioMessage),
        /// 视频
        #[prost(message, tag = "4")]
        Video(super::VideoMessage),
        /// 位置
        #[prost(message, tag = "5")]
        Location(super::LocationMessage),
        /// 文件
        #[prost(message, tag = "6")]
        File(super::FileMessage),
        /// 音视频通话
        #[prost(message, tag = "7")]
        AvCall(super::AvCallMessage),
        /// 自定义消息
        #[prost(message, tag = "8")]
        Custom(super::CustomMessage),
        /// 头像
        #[prost(message, tag = "9")]
        Emoji(super::EmojiMessage),
        /// 撤回
        #[prost(message, tag = "10")]
        Revoke(super::RevokeMessage),
        /// 转发
        #[prost(message, tag = "11")]
        Forward(super::ForwardMessage),
        /// 引用消息
        #[prost(message, tag = "12")]
        Quote(super::QuoteMessage),
    }
}
/// 文本消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextMessage {
    /// 文本内容
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
}
/// 图片消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageMessage {
    /// 图片地址
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    /// 宽度
    #[prost(int32, tag = "2")]
    pub width: i32,
    /// 高度
    #[prost(int32, tag = "3")]
    pub height: i32,
    /// 缩略图地址
    #[prost(string, tag = "4")]
    pub thumbnail_url: ::prost::alloc::string::String,
}
/// 音频消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AudioMessage {
    /// 音频文件地址
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    /// 时长（秒）
    #[prost(int32, tag = "2")]
    pub duration: i32,
}
/// 视频消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoMessage {
    /// 视频地址
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    /// 时长（秒）
    #[prost(int32, tag = "2")]
    pub duration: i32,
    /// 宽度
    #[prost(int32, tag = "3")]
    pub width: i32,
    /// 高度
    #[prost(int32, tag = "4")]
    pub height: i32,
    /// 视频封面图地址
    #[prost(string, tag = "5")]
    pub thumbnail_url: ::prost::alloc::string::String,
}
/// 位置信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocationMessage {
    /// 纬度
    #[prost(double, tag = "1")]
    pub latitude: f64,
    /// 经度
    #[prost(double, tag = "2")]
    pub longitude: f64,
    /// 地址信息
    #[prost(string, tag = "3")]
    pub address: ::prost::alloc::string::String,
    /// 地点名称
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
}
/// 文件消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileMessage {
    /// 文件名
    #[prost(string, tag = "1")]
    pub file_name: ::prost::alloc::string::String,
    /// 文件下载地址
    #[prost(string, tag = "2")]
    pub url: ::prost::alloc::string::String,
    /// 文件大小（字节）
    #[prost(int64, tag = "3")]
    pub file_size: i64,
    /// 文件类型 MIME
    #[prost(string, tag = "4")]
    pub file_type: ::prost::alloc::string::String,
}
/// 音视频通话消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvCallMessage {
    /// 通话唯一标识
    #[prost(string, tag = "1")]
    pub call_id: ::prost::alloc::string::String,
    /// 是否为视频通话
    #[prost(bool, tag = "2")]
    pub is_video: bool,
    /// 通话状态
    #[prost(enumeration = "CallStatus", tag = "3")]
    pub status: i32,
    /// 通话时长（秒）
    #[prost(int32, tag = "4")]
    pub duration: i32,
}
/// 系统事件消息（扩展）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemEventMessage {
    /// 事件类型（如 user_banned, server_shutdown 等）
    #[prost(string, tag = "1")]
    pub event_type: ::prost::alloc::string::String,
    /// 事件描述信息
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// 附加字段（键值对）
    #[prost(map = "string, string", tag = "3")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// 提醒类型消息（如代办、日程）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReminderMessage {
    /// 提醒内容
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    /// 提醒时间戳（毫秒）
    #[prost(int64, tag = "2")]
    pub remind_time: i64,
}
/// 网络电话消息（如拨打记录）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoipMessage {
    /// 电话号码
    #[prost(string, tag = "1")]
    pub phone_number: ::prost::alloc::string::String,
    /// 是否为来电
    #[prost(bool, tag = "2")]
    pub incoming: bool,
    /// 通话时长（秒）
    #[prost(int32, tag = "3")]
    pub duration: i32,
    /// 通话状态
    #[prost(enumeration = "CallStatus", tag = "4")]
    pub status: i32,
}
/// 自定义消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomMessage {
    /// 自定义类型标识
    #[prost(string, tag = "1")]
    pub custom_type: ::prost::alloc::string::String,
    /// 自定义内容（JSON 字符串）
    #[prost(string, tag = "2")]
    pub json_payload: ::prost::alloc::string::String,
}
/// 表情消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmojiMessage {
    /// 表情类型
    #[prost(enumeration = "EmojiType", tag = "1")]
    pub emoji: i32,
    /// 自定义表情图片地址，仅当 emoji = CUSTOM_EMOJI 时有效
    #[prost(string, tag = "2")]
    pub custom_emoji_url: ::prost::alloc::string::String,
}
/// 撤回消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeMessage {
    /// 被撤回的消息 ID
    #[prost(string, tag = "1")]
    pub target_message_id: ::prost::alloc::string::String,
    /// 撤回操作者 ID
    #[prost(string, tag = "2")]
    pub operator_id: ::prost::alloc::string::String,
    /// 撤回时间戳（毫秒）
    #[prost(int64, tag = "3")]
    pub revoke_time: i64,
}
/// 引用消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuoteMessage {
    /// 引用的消息 ID
    #[prost(string, tag = "1")]
    pub quoted_message_id: ::prost::alloc::string::String,
    /// 引用预览内容
    #[prost(string, tag = "2")]
    pub quoted_content_preview: ::prost::alloc::string::String,
    /// 回复的内容
    #[prost(string, tag = "3")]
    pub quote_text: ::prost::alloc::string::String,
}
/// 转发消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForwardMessage {
    /// 原始消息 ID
    #[prost(string, tag = "1")]
    pub original_message_id: ::prost::alloc::string::String,
    /// 原始发送者 ID
    #[prost(string, tag = "2")]
    pub original_sender_id: ::prost::alloc::string::String,
    /// 原始消息类型
    #[prost(enumeration = "MessageType", tag = "3")]
    pub original_type: i32,
    /// 原始内容摘要
    #[prost(string, tag = "4")]
    pub summary: ::prost::alloc::string::String,
}
/// ===== 系统通知类消息结构 =====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemNotification {
    /// 通知类型：login, logout, mute, group_update 等
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    /// 发起方（系统或管理员）
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    /// 被操作对象（用户 ID 或群组 ID）
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// 文本内容或 JSON 描述
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    /// 时间戳（毫秒）
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
    /// 扩展字段
    #[prost(map = "string, string", tag = "6")]
    pub meta: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// 已读回执（用于单聊或群聊）
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadReceipt {
    /// 消息 ID
    #[prost(string, tag = "1")]
    pub msg_id: ::prost::alloc::string::String,
    /// 已读用户 ID 列表
    #[prost(string, repeated, tag = "2")]
    pub reader_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 最早已读时间戳
    #[prost(int64, tag = "3")]
    pub read_time: i64,
}
/// 正在输入通知
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypingNotice {
    /// 谁在输入
    #[prost(string, tag = "1")]
    pub from_user: ::prost::alloc::string::String,
    /// 输入目标
    #[prost(string, tag = "2")]
    pub to_user: ::prost::alloc::string::String,
    /// 是否正在输入
    #[prost(bool, tag = "3")]
    pub is_typing: bool,
    /// 时间戳
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
}
/// 群成员变更消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupMemberChange {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub operator_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub affected_users: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// add / remove / mute / promote
    #[prost(string, tag = "4")]
    pub change_type: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
}
/// 群属性变更通知
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupAttributeChange {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub old_value: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub new_value: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub operator_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Heartbeat {
    /// 客户端发送时间（可选）
    #[prost(int64, tag = "1")]
    pub timestamp: i64,
}
/// 消息确认（ACK）消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AckMessage {
    /// 被确认的消息 ID
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 确认时间戳（毫秒）
    #[prost(int64, tag = "3")]
    pub ack_timestamp: i64,
}
/// 客户端连接后发送的认证请求消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthRequest {
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 用于身份验证的 token（或 API 密钥）
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    /// 客户端标识，可用于区分来源
    #[prost(string, tag = "3")]
    pub client_id: ::prost::alloc::string::String,
    /// 设备类型
    #[prost(enumeration = "DeviceType", tag = "4")]
    pub device_type: i32,
}
/// 服务端回复客户端的认证结果
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthResponse {
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 是否认证成功
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// 详细信息，例如错误原因或成功说明
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Envelope {
    /// 封包唯一 ID（可用于链路追踪）
    #[prost(string, tag = "1")]
    pub envelope_id: ::prost::alloc::string::String,
    /// 封包类型（决定方向/功能）
    #[prost(enumeration = "EnvelopeType", tag = "2")]
    pub r#type: i32,
    /// 封包发送时间戳（毫秒）
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
    #[prost(oneof = "envelope::Payload", tags = "4, 5, 6, 7, 8, 9, 10, 11, 12, 13")]
    pub payload: ::core::option::Option<envelope::Payload>,
}
/// Nested message and enum types in `Envelope`.
pub mod envelope {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        /// 认证
        #[prost(message, tag = "4")]
        AuthRequest(super::AuthRequest),
        /// 认证响应
        #[prost(message, tag = "5")]
        AuthResponse(super::AuthResponse),
        /// 聊天消息
        #[prost(message, tag = "6")]
        Message(super::Message),
        /// 消息回执
        #[prost(message, tag = "7")]
        ReadReceipt(super::ReadReceipt),
        /// 系统消息
        #[prost(message, tag = "8")]
        SystemNotification(super::SystemNotification),
        /// 正在输入消息
        #[prost(message, tag = "9")]
        TypingNotice(super::TypingNotice),
        /// 群成员变更消息
        #[prost(message, tag = "10")]
        GroupMemberChange(super::GroupMemberChange),
        /// 群属性变更通知
        #[prost(message, tag = "11")]
        GroupAttributeChange(super::GroupAttributeChange),
        /// 新增的 ACK 消息类型
        #[prost(message, tag = "12")]
        Ack(super::AckMessage),
        #[prost(message, tag = "13")]
        Heartbeat(super::Heartbeat),
    }
}
/// 会话类型枚举
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatScene {
    /// 未知
    ChatUnknown = 0,
    /// 单聊
    Single = 1,
    /// 群聊
    Group = 2,
}
impl ChatScene {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChatUnknown => "CHAT_UNKNOWN",
            Self::Single => "SINGLE",
            Self::Group => "GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_UNKNOWN" => Some(Self::ChatUnknown),
            "SINGLE" => Some(Self::Single),
            "GROUP" => Some(Self::Group),
            _ => None,
        }
    }
}
/// 消息类型枚举
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageType {
    /// 未知类型
    Unknown = 0,
    /// 文本
    Text = 1,
    /// 图片
    Image = 2,
    /// 音频
    Audio = 3,
    /// 视频
    Video = 4,
    /// 位置
    Location = 5,
    /// 文件
    File = 6,
    /// 音视频通话
    AvCall = 7,
    /// 通知类
    Notification = 8,
    /// 系统类
    System = 9,
    /// 提醒
    Reminder = 10,
    /// 网络电话
    Voip = 11,
    /// 自定义
    Custom = 12,
    /// 表情
    Emoji = 13,
    /// 系统事件
    SystemEvent = 14,
    /// 撤回消息
    Revoke = 15,
    /// 转发消息
    Forward = 16,
    /// 引用消息
    Quote = 17,
}
impl MessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Text => "TEXT",
            Self::Image => "IMAGE",
            Self::Audio => "AUDIO",
            Self::Video => "VIDEO",
            Self::Location => "LOCATION",
            Self::File => "FILE",
            Self::AvCall => "AV_CALL",
            Self::Notification => "NOTIFICATION",
            Self::System => "SYSTEM",
            Self::Reminder => "REMINDER",
            Self::Voip => "VOIP",
            Self::Custom => "CUSTOM",
            Self::Emoji => "EMOJI",
            Self::SystemEvent => "SYSTEM_EVENT",
            Self::Revoke => "REVOKE",
            Self::Forward => "FORWARD",
            Self::Quote => "QUOTE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "TEXT" => Some(Self::Text),
            "IMAGE" => Some(Self::Image),
            "AUDIO" => Some(Self::Audio),
            "VIDEO" => Some(Self::Video),
            "LOCATION" => Some(Self::Location),
            "FILE" => Some(Self::File),
            "AV_CALL" => Some(Self::AvCall),
            "NOTIFICATION" => Some(Self::Notification),
            "SYSTEM" => Some(Self::System),
            "REMINDER" => Some(Self::Reminder),
            "VOIP" => Some(Self::Voip),
            "CUSTOM" => Some(Self::Custom),
            "EMOJI" => Some(Self::Emoji),
            "SYSTEM_EVENT" => Some(Self::SystemEvent),
            "REVOKE" => Some(Self::Revoke),
            "FORWARD" => Some(Self::Forward),
            "QUOTE" => Some(Self::Quote),
            _ => None,
        }
    }
}
/// 通话状态
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CallStatus {
    /// 呼叫中
    Calling = 0,
    /// 已接听
    Accepted = 1,
    /// 已拒绝
    Rejected = 2,
    /// 未接听
    Missed = 3,
    /// 已结束
    Ended = 4,
}
impl CallStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Calling => "CALLING",
            Self::Accepted => "ACCEPTED",
            Self::Rejected => "REJECTED",
            Self::Missed => "MISSED",
            Self::Ended => "ENDED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CALLING" => Some(Self::Calling),
            "ACCEPTED" => Some(Self::Accepted),
            "REJECTED" => Some(Self::Rejected),
            "MISSED" => Some(Self::Missed),
            "ENDED" => Some(Self::Ended),
            _ => None,
        }
    }
}
/// 系统消息类型枚举
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SystemMessageType {
    /// 未知类型
    SysUnknown = 0,
    /// 系统维护
    SysMaintenance = 1,
    /// 系统升级
    SysUpgrade = 2,
    /// 警告提醒
    SysAlert = 3,
    /// 公告通知
    SysNotice = 4,
    /// 用户封禁
    SysUserBlocked = 5,
    /// 用户解封
    SysUserRestored = 6,
    /// 服务器下线
    SysServerShutdown = 7,
}
impl SystemMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SysUnknown => "SYS_UNKNOWN",
            Self::SysMaintenance => "SYS_MAINTENANCE",
            Self::SysUpgrade => "SYS_UPGRADE",
            Self::SysAlert => "SYS_ALERT",
            Self::SysNotice => "SYS_NOTICE",
            Self::SysUserBlocked => "SYS_USER_BLOCKED",
            Self::SysUserRestored => "SYS_USER_RESTORED",
            Self::SysServerShutdown => "SYS_SERVER_SHUTDOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYS_UNKNOWN" => Some(Self::SysUnknown),
            "SYS_MAINTENANCE" => Some(Self::SysMaintenance),
            "SYS_UPGRADE" => Some(Self::SysUpgrade),
            "SYS_ALERT" => Some(Self::SysAlert),
            "SYS_NOTICE" => Some(Self::SysNotice),
            "SYS_USER_BLOCKED" => Some(Self::SysUserBlocked),
            "SYS_USER_RESTORED" => Some(Self::SysUserRestored),
            "SYS_SERVER_SHUTDOWN" => Some(Self::SysServerShutdown),
            _ => None,
        }
    }
}
/// 表情类型枚举
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmojiType {
    /// 未知表情
    EmojiUnknown = 0,
    /// 微笑
    Smile = 1,
    /// 咧嘴笑
    Grin = 2,
    /// 流泪
    Tears = 3,
    /// 吐舌头
    StuckOutTongue = 4,
    /// 生气
    Scowl = 5,
    /// 害羞
    Shy = 6,
    /// 沉默
    Silent = 7,
    /// 惊恐
    Horror = 8,
    /// 委屈
    Wronged = 9,
    /// 疯了
    Crazy = 10,
    /// 花痴
    Beautiful = 11,
    /// 困倦
    Snooze = 12,
    /// 睡觉
    Sleep = 13,
    /// 猪头
    Pig = 14,
    /// 赞
    Good = 15,
    /// 感谢
    Thanks = 16,
    /// 强壮
    Strong = 17,
    /// 虚弱
    Weak = 18,
    /// 握手
    Handshake = 19,
    /// 胜利
    Victory = 20,
    /// 爱心
    Heart = 21,
    /// 心碎
    BrokenHeart = 22,
    /// 大拇指
    ThumbsUp = 23,
    /// 倒拇指
    ThumbsDown = 24,
    /// 鼓掌
    Clap = 25,
    /// 问号
    Question = 26,
    /// 感叹号
    Exclamation = 27,
    /// 便便
    Poop = 28,
    /// 月亮
    Moon = 29,
    /// 太阳
    Sun = 30,
    /// 蛋糕
    Cake = 31,
    /// 礼物
    Gift = 32,
    /// 咖啡
    Coffee = 33,
    /// 玫瑰
    Rose = 34,
    /// 凋谢的玫瑰
    WiltedRose = 35,
    /// 亲吻
    Kiss = 36,
    /// 拥抱
    Hug = 37,
    /// 炸弹
    Bomb = 38,
    /// 小刀
    Knife = 39,
    /// 西瓜
    Watermelon = 40,
    /// 啤酒
    Beer = 41,
    /// 汽车
    Car = 42,
    /// 钱袋
    Money = 43,
    /// 闪电
    Lightning = 44,
    /// 火焰
    Fire = 45,
    /// 礼品盒
    Present = 46,
    /// 音乐
    Music = 47,
    /// 电话
    Phone = 48,
    /// 自定义表情（通过 URL 指定）
    CustomEmoji = 1000,
}
impl EmojiType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EmojiUnknown => "EMOJI_UNKNOWN",
            Self::Smile => "SMILE",
            Self::Grin => "GRIN",
            Self::Tears => "TEARS",
            Self::StuckOutTongue => "STUCK_OUT_TONGUE",
            Self::Scowl => "SCOWL",
            Self::Shy => "SHY",
            Self::Silent => "SILENT",
            Self::Horror => "HORROR",
            Self::Wronged => "WRONGED",
            Self::Crazy => "CRAZY",
            Self::Beautiful => "BEAUTIFUL",
            Self::Snooze => "SNOOZE",
            Self::Sleep => "SLEEP",
            Self::Pig => "PIG",
            Self::Good => "GOOD",
            Self::Thanks => "THANKS",
            Self::Strong => "STRONG",
            Self::Weak => "WEAK",
            Self::Handshake => "HANDSHAKE",
            Self::Victory => "VICTORY",
            Self::Heart => "HEART",
            Self::BrokenHeart => "BROKEN_HEART",
            Self::ThumbsUp => "THUMBS_UP",
            Self::ThumbsDown => "THUMBS_DOWN",
            Self::Clap => "CLAP",
            Self::Question => "QUESTION",
            Self::Exclamation => "EXCLAMATION",
            Self::Poop => "POOP",
            Self::Moon => "MOON",
            Self::Sun => "SUN",
            Self::Cake => "CAKE",
            Self::Gift => "GIFT",
            Self::Coffee => "COFFEE",
            Self::Rose => "ROSE",
            Self::WiltedRose => "WILTED_ROSE",
            Self::Kiss => "KISS",
            Self::Hug => "HUG",
            Self::Bomb => "BOMB",
            Self::Knife => "KNIFE",
            Self::Watermelon => "WATERMELON",
            Self::Beer => "BEER",
            Self::Car => "CAR",
            Self::Money => "MONEY",
            Self::Lightning => "LIGHTNING",
            Self::Fire => "FIRE",
            Self::Present => "PRESENT",
            Self::Music => "MUSIC",
            Self::Phone => "PHONE",
            Self::CustomEmoji => "CUSTOM_EMOJI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EMOJI_UNKNOWN" => Some(Self::EmojiUnknown),
            "SMILE" => Some(Self::Smile),
            "GRIN" => Some(Self::Grin),
            "TEARS" => Some(Self::Tears),
            "STUCK_OUT_TONGUE" => Some(Self::StuckOutTongue),
            "SCOWL" => Some(Self::Scowl),
            "SHY" => Some(Self::Shy),
            "SILENT" => Some(Self::Silent),
            "HORROR" => Some(Self::Horror),
            "WRONGED" => Some(Self::Wronged),
            "CRAZY" => Some(Self::Crazy),
            "BEAUTIFUL" => Some(Self::Beautiful),
            "SNOOZE" => Some(Self::Snooze),
            "SLEEP" => Some(Self::Sleep),
            "PIG" => Some(Self::Pig),
            "GOOD" => Some(Self::Good),
            "THANKS" => Some(Self::Thanks),
            "STRONG" => Some(Self::Strong),
            "WEAK" => Some(Self::Weak),
            "HANDSHAKE" => Some(Self::Handshake),
            "VICTORY" => Some(Self::Victory),
            "HEART" => Some(Self::Heart),
            "BROKEN_HEART" => Some(Self::BrokenHeart),
            "THUMBS_UP" => Some(Self::ThumbsUp),
            "THUMBS_DOWN" => Some(Self::ThumbsDown),
            "CLAP" => Some(Self::Clap),
            "QUESTION" => Some(Self::Question),
            "EXCLAMATION" => Some(Self::Exclamation),
            "POOP" => Some(Self::Poop),
            "MOON" => Some(Self::Moon),
            "SUN" => Some(Self::Sun),
            "CAKE" => Some(Self::Cake),
            "GIFT" => Some(Self::Gift),
            "COFFEE" => Some(Self::Coffee),
            "ROSE" => Some(Self::Rose),
            "WILTED_ROSE" => Some(Self::WiltedRose),
            "KISS" => Some(Self::Kiss),
            "HUG" => Some(Self::Hug),
            "BOMB" => Some(Self::Bomb),
            "KNIFE" => Some(Self::Knife),
            "WATERMELON" => Some(Self::Watermelon),
            "BEER" => Some(Self::Beer),
            "CAR" => Some(Self::Car),
            "MONEY" => Some(Self::Money),
            "LIGHTNING" => Some(Self::Lightning),
            "FIRE" => Some(Self::Fire),
            "PRESENT" => Some(Self::Present),
            "MUSIC" => Some(Self::Music),
            "PHONE" => Some(Self::Phone),
            "CUSTOM_EMOJI" => Some(Self::CustomEmoji),
            _ => None,
        }
    }
}
/// 支持的设备类型（枚举）
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeviceType {
    /// 默认未知
    DeviceUnknown = 0,
    /// 安桌
    Android = 1,
    /// 苹果
    Ios = 2,
    /// WEB
    Web = 3,
    /// 桌面
    Desktop = 4,
}
impl DeviceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DeviceUnknown => "DEVICE_UNKNOWN",
            Self::Android => "ANDROID",
            Self::Ios => "IOS",
            Self::Web => "WEB",
            Self::Desktop => "DESKTOP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEVICE_UNKNOWN" => Some(Self::DeviceUnknown),
            "ANDROID" => Some(Self::Android),
            "IOS" => Some(Self::Ios),
            "WEB" => Some(Self::Web),
            "DESKTOP" => Some(Self::Desktop),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnvelopeType {
    ClientToServer = 0,
    ServerToClient = 1,
    Ack = 2,
}
impl EnvelopeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ClientToServer => "CLIENT_TO_SERVER",
            Self::ServerToClient => "SERVER_TO_CLIENT",
            Self::Ack => "ACK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLIENT_TO_SERVER" => Some(Self::ClientToServer),
            "SERVER_TO_CLIENT" => Some(Self::ServerToClient),
            "ACK" => Some(Self::Ack),
            _ => None,
        }
    }
}
