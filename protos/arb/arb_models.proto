syntax = "proto3";

package rpc_arb_models;

// =====================
// 枚举：分片节点状态定义
// =====================
enum ShardState {
  UNSPECIFIED = 0;        // 默认值，表示未明确设置状态
  REGISTERED = 1;         // 节点已注册，等待分片分配（未调度）
  NORMAL = 2;             // 分片正常运行中（已调度完成）
  MIGRATING = 3;          // 正在迁移（当前节点将转出）
  FAILED = 4;             // 节点异常、下线、心跳失联等状态
  PREPARING = 5;          // 正在准备接管分片（目标节点）
  READY = 6;              // 接管准备完成，可切换 owner
  OFFLINE = 7;            // 节点主动下线，分片不可调度
  PREPARING_OFFLINE = 8;  // 节点准备下线，等待迁移完成
}


// =====================
// 通用结构体定义
// =====================
// 基础请求，仅包含节点地址
message BaseRequest {
  string node_addr = 1; // 节点地址（如 192.168.1.10:9000）
}

// 通用响应结构（统一 success + message）
message CommonResp {
  bool success = 1;
  string message = 2;
}

// ============================
// 分片节点元信息
// ============================
message ShardNodeInfo {
  string node_addr = 1;             // 所属节点地址
  uint64 version = 2;               // 当前版本号（用于 CAS 检查）
  ShardState state = 3;             // 当前状态
  uint64 last_update_time = 4;      // 最后更新时间戳（毫秒）
  int32 index = 5;                // 分片索引（用于分片调度）
  int32 total= 6;                   // 分片总数
}


// ============================
// 请求结构：更新分片状态
// ============================
message UpdateShardStateRequest {
  string node_addr = 1;
  ShardState new_state = 2;
}


message ListShardNodesResponse {
  repeated ShardNodeInfo nodes = 1;
}

message ListAllNodesResponse {
  repeated ShardNodeInfo nodes = 1;
}
