syntax = "proto3";
package protocol.status;
import "common.proto";
// ======================================
// 📊 状态相关协议定义文件
// ======================================
// 本文件定义了与用户状态、消息状态相关的协议，用于状态同步和确认
// 
// 主要包含：
// 1. ReadReceiptMsg - 消息已读回执
// 2. TypingNoticeMsg - 正在输入通知
// 3. HeartbeatMsg - 心跳包
// 4. AckMsg - ACK 确认消息
// ======================================

// =======================================
// ✅ 消息已读回执（Read Receipt）
// =======================================
// 表示某条消息已被哪些用户阅读，适用于单聊或群聊消息同步场景。
message ReadReceiptMsg {
  uint64 message_id = 1;     // 当前消息的唯一 ID，用于追踪、ACK 等
  repeated string reader_ids = 2;     // 已读该消息的用户 ID 列表（单聊为1，群聊可多）
  int64 read_time = 3;                // 首次被读的时间戳（毫秒）
}

// =======================================
// ✍️ 正在输入通知（Typing Notice）
// =======================================
// 表示某个用户正在对另一个用户/会话进行输入操作，适用于 UI "对方正在输入..." 提示。
message TypingNoticeMsg {
  string from_uid = 1;   // 正在输入的用户 ID（发送方）
  string to_uid = 2;     // 输入目标 ID（对方用户 ID 或群组 ID）
  bool is_typing = 3;     // 是否正在输入（true=开始输入, false=结束输入）
  int64 timestamp = 4;    // 通知发送的时间戳（毫秒）
}

// =======================================
// ❤️ 心跳包（Heartbeat）
// =======================================
// 用于维持客户端与服务器之间的长连接状态，客户端定时发送。
message HeartbeatMsg {
  // 心跳包通常不需要额外字段，仅用于保持连接活跃
}

// =======================================
// 📨 ACK 确认消息（AckMessage）
// =======================================
// 用于确认收到某一封消息（包括聊天、系统等），支持链路追踪和可靠性保证。
message AckMsg {
  uint64 message_id = 1;       // 被确认接收的消息 ID
  common.ByteMessageType ack_type = 2;  // 确认类型
}

// =======================================
// 🔗 重连消息（ReConnectMsg）
// =================
message ReConnectMsg {
  uint64 message_id = 1;       // 被确认接收的消息 ID
  string socket_addr = 2;       // 重连的 Socket 地址
}