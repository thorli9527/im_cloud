syntax = "proto3";

package protocol.message;

import "common/common.proto"; // 引入公共类型，如 UserProfile、MediaMeta 可自定义

// ======================================
// 💬 消息协议定义文件
// ======================================
// 本文件定义了 IM 系统中的核心消息结构，包括各种类型的消息内容和消息段
// 
// 主要包含：
// 1. ChatScene - 会话场景类型枚举
// 2. EmojiType - Emoji 类型定义
// 3. Content - 顶层消息结构
// 4. MessageContent - 消息内容结构（oneof 类型）
// 5. 各种具体消息类型（TextContent、ImageContent 等）
// 6. Segment - 消息段结构
// ======================================

// ======================================
// 💬 会话场景类型
// ======================================
// 用于标识消息所属的会话类型，帮助客户端进行不同的渲染和处理
enum ChatScene {
  CHAT_UNKNOWN = 0; // 默认未知场景（防御值）
  SINGLE = 1;       // 单人会话：用户与用户之间的私聊
  GROUP = 2;        // 群聊会话：群组内的多人聊天
}

// ======================================
// 😄 Emoji 类型定义（标准 + 自定义）
// ======================================
// 定义了系统中支持的 emoji 类型，包括标准 emoji 和自定义表情
enum EmojiType {
  EMOJI_UNKNOWN = 0;
  SMILE = 1;           // 微笑表情
  GRIN = 2;            // 咧嘴笑表情
  TEARS = 3;           // 流泪表情
  STUCK_OUT_TONGUE = 4; // 吐舌头表情
  CLAP = 25;           // 鼓掌表情
  POOP = 28;           // 便便表情
  HEART = 21;          // 爱心表情
  // ... 可继续扩展标准 Emoji
  CUSTOM_EMOJI = 1000; // 自定义表情（通过图片 URL 指定）
}


// ======================================
// 💠 消息内容结构（oneof 类型）
// ======================================
// 使用 oneof 定义不同类型的消息内容，确保消息类型的互斥性
message MessageContent {
  oneof content {
    TextContent text = 1;                    // 文本消息：纯文本内容
    ImageContent image = 2;                  // 图片消息：图片文件
    AudioContent audio = 3;                  // 音频消息：语音或音乐
    VideoContent video = 4;                  // 视频消息：视频文件
    LocationContent location = 5;            // 位置消息：地理位置信息
    FileContent file = 6;                    // 文件消息：任意文件类型
    AVCallContent av_call = 7;               // 音视频通话信令：通话控制消息
    CustomContent custom = 8;                // 自定义消息：开发者自定义结构
    EmojiContent emoji = 9;                  // 表情消息：emoji 表情
    RevokeContent revoke = 10;               // 撤回消息：消息撤回通知
    ForwardContent forward = 11;             // 转发消息：消息转发
    QuoteContent quote = 12;                 // 引用回复消息：回复特定消息
    HtmlContent html = 13;                   // HTML 卡片：富文本内容
    VoipContent voip = 14;                   // VOIP 通话记录：通话日志
    NotificationContent notification = 15;    // 通知消息：系统通知
    SystemContent system = 16;               // 系统消息：系统级消息
    ReminderContent reminder = 17;           // 提醒消息：提醒事项
    GroupEventContent group_event = 18;      // 群组事件：群组相关事件
    ContactCardContent contact_card = 19;    // 名片消息：联系人分享
    VoteContent vote = 20;                   // 投票消息：投票内容
    RedEnvelopeContent red_envelope = 21;    // 红包消息：红包内容
  }
}

// ===============================
// 📄 文本消息
// ===============================
// 支持纯文本和富文本格式，包含内联实体（链接、@用户、话题等）
message TextContent {
  string text = 1;                      // 文本主体内容：消息的文本内容
  repeated InlineEntity entities = 2;    // 富文本实体，如链接/@用户/话题：文本中的特殊元素
}

// 内联实体：用于在文本中标记特殊元素
message InlineEntity {
  int32 start = 1;                     // 起始位置（UTF-8 字符索引）：实体在文本中的开始位置
  int32 end = 2;                       // 结束位置（不含）：实体在文本中的结束位置
  string type = 3;                     // 类型：link / mention / hashtag：实体的类型
  string value = 4;                    // 附加值：URL、用户ID等：实体的具体值
}

// ===============================
// 🖼️ 图片消息
// ===============================
// 包含图片的完整信息，支持原图和缩略图
message ImageContent {
  string url = 1;                      // 原图 URL：图片的完整地址
  string thumbnail_url = 2;            // 缩略图 URL：图片的缩略图地址
  int32 width = 3;                     // 宽度（像素）：图片的宽度
  int32 height = 4;                    // 高度（像素）：图片的高度
  string format = 5;                   // 格式（如 jpg/png）：图片的文件格式
  int64 size = 6;                      // 文件大小（字节）：图片文件的大小
}

// ===============================
// 🔊 音频消息
// ===============================
// 支持语音聊天和音乐播放，包含时长和格式信息
message AudioContent {
  string url = 1;                      // 音频文件 URL：音频文件的地址
  int32 duration = 2;                  // 时长（秒）：音频的播放时长
  string format = 3;                   // 格式：音频文件格式（如 mp3/wav）
  int64 size = 4;                      // 文件大小（字节）：音频文件的大小
  bool is_voice = 5;                   // 是否语音（vs 音乐类音频）：true表示语音，false表示音乐
}

// ===============================
// 🎞️ 视频消息
// ===============================
// 包含视频文件和封面图，支持播放控制
message VideoContent {
  string url = 1;                      // 视频文件 URL：视频文件的地址
  int32 duration = 2;                  // 时长（秒）：视频的播放时长
  string cover_url = 3;                // 封面图 URL：视频的封面图片
  int32 width = 4;                     // 宽度（像素）：视频的宽度
  int32 height = 5;                    // 高度（像素）：视频的高度
  string format = 6;                   // 格式：视频文件格式（如 mp4/avi）
  int64 size = 7;                      // 文件大小（字节）：视频文件的大小
}

// ===============================
// 📍 位置消息
// ===============================
// 包含地理位置信息，支持地址描述和地图显示
message LocationContent {
  double latitude = 1;                 // 纬度：地理位置的纬度坐标
  double longitude = 2;                // 经度：地理位置的经度坐标
  string address = 3;                  // 地址描述：位置的文字描述
  string poi_name = 4;                 // 地点名称：具体的地点名称
  string thumbnail_url = 5;            // 缩略图 URL：位置的地图缩略图
}

// ===============================
// 📁 文件消息
// ===============================
// 支持任意文件类型，包含文件信息和图标
message FileContent {
  string url = 1;                      // 文件 URL：文件的下载地址
  string name = 2;                     // 文件名：文件的显示名称
  int64 size = 3;                      // 文件大小（字节）：文件的大小
  string file_type = 4;                // 文件类型：文件的 MIME 类型
  string icon_url = 5;                 // 图标 URL：文件类型的图标
}

// ===============================
// 📞 音视频通话信令
// ===============================
// 用于音视频通话的控制信令，包含通话状态和参与者信息
message AVCallContent {
  string call_id = 1;                  // 通话 ID：通话的唯一标识
  string initiator_id = 2;             // 发起者 ID：通话的发起用户
  repeated string participant_ids = 3;  // 参与者 ID 列表：通话的所有参与者
  enum CallAction {
    UNKNOWN = 0;                       // 未知操作
    INVITE = 1;                        // 邀请：发起通话邀请
    ACCEPT = 2;                        // 接受：接受通话邀请
    REJECT = 3;                        // 拒绝：拒绝通话邀请
    CANCEL = 4;                        // 取消：取消通话
    END = 5;                           // 结束：结束通话
    TIMEOUT = 6;                       // 超时：通话超时
  }
  CallAction action = 4;               // 通话操作：具体的通话动作
  enum CallType {
    AUDIO = 0;                         // 音频通话：仅语音通话
    VIDEO = 1;                         // 视频通话：音视频通话
  }
  CallType type = 5;                   // 通话类型：通话的类型
  int64 timestamp = 6;                 // 时间戳：操作的时间
  int32 duration = 7;                  // 时长（秒）：通话的持续时间
}

// ===============================
// 💠 自定义结构化消息
// ===============================
// 支持开发者自定义的消息结构，通常以 JSON 格式承载
message CustomContent {
  string custom_type = 1;              // 自定义类型：消息的自定义类型标识
  string json_payload = 2;             // JSON 载荷：自定义消息的 JSON 数据
}

// ===============================
// 😄 表情消息
// ===============================
// 支持标准 emoji 和自定义表情
message EmojiContent {
  EmojiType emoji = 1;                 // 表情类型：标准 emoji 类型
  string custom_emoji_url = 2;         // 自定义表情 URL：自定义表情的图片地址
}

// ===============================
// ⛔ 撤回消息
// ===============================
// 用于通知消息撤回，包含撤回的目标消息信息
message RevokeContent {
  uint64 target_message_id = 1;        // 目标消息 ID：被撤回的消息ID
  string operator_id = 2;              // 操作者 ID：执行撤回操作的用户
  int64 revoke_time = 3;               // 撤回时间：撤回操作的时间戳
}

// ===============================
// 📤 转发消息
// ===============================
// 用于消息转发，包含原消息的基本信息
message ForwardContent {
  uint64 original_message_id = 1;      // 原消息 ID：被转发消息的ID
  string original_sender_id = 2;       // 原发送者 ID：原消息的发送者
  common.ContentType original_type = 3; // 原消息类型：原消息的类型
  string summary = 4;                  // 摘要：转发的摘要信息
}

// ===============================
// 📌 引用回复消息
// ===============================
// 用于回复特定消息，包含被引用消息的信息
message QuoteContent {
  uint64 quoted_message_id = 1;        // 被引用消息 ID：被回复消息的ID
  string quoted_content_preview = 2;   // 被引用内容预览：被回复消息的预览
  string quote_text = 3;               // 引用文本：回复的文本内容
}

// ===============================
// 🌐 HTML 卡片
// ===============================
// 用于富文本内容，支持网页链接和预览
message HtmlContent {
  string title = 1;                    // 标题：卡片的标题
  string url = 2;                      // URL：链接地址
  string preview = 3;                  // 预览：内容的预览文本
}

// ===============================
// 📞 VOIP 通话记录
// ===============================
// 用于记录通话历史，包含通话的基本信息
message VoipContent {
  string caller_id = 1;                // 主叫 ID：发起通话的用户
  string callee_id = 2;                // 被叫 ID：接收通话的用户
  int64 duration = 3;                  // 通话时长（秒）：通话的持续时间
  string status = 4;                   // 通话状态：通话的结果状态
}

// ===============================
// 🔔 通知消息
// ===============================
// 用于系统通知，包含标题、内容和元数据
message NotificationContent {
  string title = 1;                    // 标题：通知的标题
  string body = 2;                     // 内容：通知的主体内容
  map<string, string> metadata = 3;    // 元数据：通知的附加信息
}

// ===============================
// ⚙️ 系统消息
// ===============================
// 用于系统级消息，包含系统代码和内容
message SystemContent {
  string content = 1;                  // 内容：系统消息的内容
  string code = 2;                     // 代码：系统消息的代码标识
}

// ===============================
// ⏰ 提醒事项
// ===============================
// 用于提醒功能，包含提醒文本和时间
message ReminderContent {
  string text = 1;                     // 文本：提醒的内容
  int64 remind_at = 2;                 // 提醒时间：提醒触发的时间戳
}

// ===============================
// 👪 群组事件
// ===============================
// 用于群组相关事件，包含群组信息和操作者
message GroupEventContent {
  string group_id = 1;                 // 群组 ID：事件相关的群组
  string event = 2;                    // 事件：事件的具体描述
  string operator_id = 3;              // 操作者 ID：执行操作的用户
}

// ===============================
// 📇 名片消息
// ===============================
// 用于分享联系人信息，包含用户的基本信息
message ContactCardContent {
  string target_id = 1;                // 目标 ID：被分享用户的ID
  string display_name = 2;             // 显示名称：用户的显示名称
  string avatar_url = 3;               // 头像 URL：用户的头像地址
  string card_type = 4;                // 卡片类型：名片的类型（用户/群组）
}

// ===============================
// 📊 投票消息
// ===============================
// 用于群组投票功能，包含投票选项和结果
message VoteContent {
  string topic = 1;                    // 主题：投票的主题
  repeated string options = 2;         // 选项：投票的选项列表
  map<string, int32> result = 3;      // 结果：投票结果统计
  bool multi_choice = 4;               // 多选：是否允许多选
}

// ===============================
// 💰 红包消息
// ===============================
// 用于红包功能，包含红包金额和状态
message RedEnvelopeContent {
  string sender_id = 1;                // 发送者 ID：红包发送者
  int32 amount = 2;                    // 金额：红包金额（分）
  string blessing = 3;                 // 祝福语：红包的祝福语
  bool claimed = 4;                    // 是否已领取：红包是否已被领取
}

// ======================================
// ✂️ Segment - 消息段结构（用于复合内容）
// ======================================
// 表示一条消息中的一个独立段（如文本段、图片段等），支持排序、编辑、标记等
message Segment {
  MessageContent body = 1;             // 消息段内容（如文本、图片等，使用 oneof 封装）：段的具体内容

  string segment_id = 2;               // 段唯一标识（客户端生成或服务端补全）：段的唯一ID
  uint64 seq_in_msg = 3;               // 消息内顺序编号（用于前端渲染排序）：段在消息中的顺序

  bool edited = 4;                     // 是否为编辑后的段落（true 表示被修改）：段的编辑状态
  bool visible = 5;                    // 是否允许客户端渲染该段（false 可用于隐藏草稿等）：段的可见性

  map<string, string> metadata = 6;    // 通用扩展字段（以字符串键值对存储 JSON 扁平数据）：段的元数据
}

// ======================================
// 📨 顶层消息结构
// ======================================
// 定义了消息的基本框架，包含发送者、接收者、时间等元数据
message Content {
  optional uint64 message_id = 1;              // 唯一消息 ID（客户端生成或服务端补全）：消息的唯一标识
  string sender_id = 2;               // 消息发送方：发送消息的用户ID
  string receiver_id = 3;             // 消息接收方（单聊为对方 ID，群聊为群 ID）：接收消息的目标
  int64 timestamp = 4;                // 消息发送时间（毫秒时间戳）：消息创建的时间

  common.ContentType message_type = 5; // 主消息类型（用于快速渲染判断）：消息的主要类型
  ChatScene scene = 6;                // 消息所属会话类型（单聊/群聊）：消息的会话场景

  repeated MessageContent contents = 10; // 多段复合内容（如文本 + 图片）：消息的具体内容
}
