syntax = "proto3";
package protocol.auth;

// ======================================
// 🔐 认证相关协议定义文件
// ======================================
// 本文件定义了与用户认证相关的消息协议，包括登录、验证码、在线状态等
// 
// 主要包含：
// 1. DeviceType - 设备类型枚举
// 2. AuthReqMsg - 认证请求消息
// 3. AuthRepMsg - 认证响应消息
// 4. SendVerificationCodeReqMsg - 发送验证码请求
// 5. SendVerificationCodeRepMsg - 发送验证码响应
// 6. OnlineStatusMsg - 用户上线消息
// 7. OfflineStatueMsg - 用户下线消息
// ======================================

// ================================
// 📦 设备类型枚举
// ================================
// 用于标识客户端的来源类型，有助于服务端区分平台特性、限流策略等
enum DeviceType {
  DEVICE_UNKNOWN = 0; // 默认未知设备类型，建议作为兜底处理
  MOBILE = 1;          // 移动端设备，如 Android / iOS 客户端
  DESKTOP = 2;         // 桌面应用程序，如 Electron、原生桌面端
  WEB = 3;             // 浏览器 Web 客户端（H5）
  ALL = 100;              // 智能音箱、IoT 设备等
}
// ================================
// 📦 登录
// ================================
// 登录请求
message LoginReqMsg {
  uint64 message_id = 1;        // 当前消息的唯一 ID，用于追踪、ACK 等
  string username = 2;    // 用户名或手机号
  string password = 3;    // 密码（明文或加密）
  DeviceType device_type = 4; // 登录设备类型（枚举，如 iOS/Android/Web）
  string app_key = 5;     // 应用标识或来源渠道（可用于多 App 区分）
}
// ================================
// 📦 登录返回
// ================================
// 登录返回
message LoginRespMsg {
  uint64 message_id = 1;        // 当前消息的唯一 ID，用于追踪、ACK 等
  string token = 2; // 刷新凭证
  uint64 expires_at = 3;  // 过期时间
}

// ========================================
//  退出请求
message LogoutReqMsg {
  uint64 message_id = 1;        // 当前消息的唯一 ID，用于追踪、ACK 等
}

// 退出返回
message LogoutRespMsg {
  uint64 message_id = 1;
}

// ========================================
// 📩 发送验证码请求
// ========================================
// 客户端请求发送验证码（短信、邮件等）用于登录或注册
message SendVerificationCodeReqMsg {
  uint64 message_id = 1;        // 当前消息的唯一 ID，用于追踪、ACK 等
  string receiver = 2;          // 接收目标（手机号或邮箱）：验证码发送的目标
  string channel = 3;           // 渠道类型（如 sms / email / voice）：验证码发送渠道
  string scene = 4;             // 场景标识（如 login / register / reset_pwd）：验证码使用场景
  string uid = 5;               // 客户端 ID 或设备标识（可用于风控）：请求方标识
}

// ========================================
// ✅ 发送验证码响应
// ========================================
// 服务端对验证码发送请求的响应
message SendVerificationCodeRepMsg {
  uint64 message_id = 1;        // 与请求一致的 ID：对应请求的消息ID
  bool success = 2;             // 是否发送成功：true表示验证码已发送，false表示发送失败
  string message = 3;           // 附加消息，如错误提示：详细的响应信息
  int64 expired_in = 4;         // 有效期（秒）：验证码的有效期，单位秒
}

// =======================================
// 🟢 用户上线消息（OnlineStatus）
// =======================================
// 表示某个用户刚刚上线，服务端可用于广播通知。
message OnlineStatusMsg {
  uint64 message_id = 1;        // 当前消息的唯一 ID，用于追踪、ACK 等
  string uid = 2;               // 上线用户 ID：上线用户的唯一标识
  DeviceType device_type = 3;   // 上线设备类型（如 mobile/web/pc）：用户使用的设备类型
  string client_id = 4;         // 客户端实例 ID（可用于多端区分）：客户端唯一标识
  int64 login_time = 5;         // 上线时间戳（毫秒）：用户上线的时间
}

// =======================================
// 🔴 用户下线消息（OfflineStatus）
// =======================================
// 表示某个用户从某设备下线，服务端可用于状态同步或通知。
message OfflineStatueMsg {
  uint64 message_id = 1;        // 当前消息的唯一 ID，用于追踪、ACK 等
  string uid = 2;               // 下线用户 ID：下线用户的唯一标识
  DeviceType device_type = 3;   // 下线设备类型（如 mobile/web/pc）：用户使用的设备类型
  string client_id = 4;         // 客户端实例 ID（可用于多端区分）：客户端唯一标识
  int64 logout_time = 5;        // 下线时间戳（毫秒）：用户下线的时间
  string reason = 6;            // 可选：下线原因，如超时、手动退出、被踢等：下线原因说明
}