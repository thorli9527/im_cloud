// This file is @generated by prost-build.
/// *
/// 创建群组请求
/// 用于创建一个新群组，由 creator_uid 发起。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupReq {
    /// 消息唯一 ID（用于日志追踪、幂等等）
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 创建者的用户 ID，自动成为群主
    #[prost(string, tag = "2")]
    pub creator_uid: ::prost::alloc::string::String,
    /// 群名称
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// 初始群成员 UID 列表（不包含自己）
    #[prost(string, repeated, tag = "4")]
    pub members: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 群头像（可选）
    #[prost(string, optional, tag = "5")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    /// 群简介（可选）
    #[prost(string, optional, tag = "6")]
    pub intro: ::core::option::Option<::prost::alloc::string::String>,
}
/// *
/// 修改群资料请求
/// 包括名称、头像、简介的更新，操作者需要有权限（如群主、管理员）。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGroupProfileReq {
    /// 请求 ID
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 操作者 UID（必须具备权限）
    #[prost(string, tag = "2")]
    pub operator_uid: ::prost::alloc::string::String,
    /// 目标群 ID
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
    /// 新的群名称（可选）
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// 新头像（可选）
    #[prost(string, optional, tag = "5")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    /// 新简介（可选）
    #[prost(string, optional, tag = "6")]
    pub intro: ::core::option::Option<::prost::alloc::string::String>,
}
/// *
/// 加入群请求
/// 用户主动发起入群申请，等待管理员审核。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinGroupReq {
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 请求加入的用户 ID
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    /// 目标群 ID
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
    /// 入群理由（显示给群主/管理员）
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
}
/// *
/// 退出群组请求
/// 用户主动退出群聊。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuitGroupReq {
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 用户 UID
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    /// 群组 ID
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
}
/// *
/// 解散群请求
/// 仅群主可调用该接口，执行后群组彻底删除。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DismissGroupReq {
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 群主 UID
    #[prost(string, tag = "2")]
    pub owner_uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
}
/// *
/// 踢人请求
/// 管理员或群主将某成员移出群聊。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KickMemberReq {
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 执行踢人的用户（管理员/群主）
    #[prost(string, tag = "2")]
    pub operator_uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
    /// 被踢用户的 UID
    #[prost(string, tag = "4")]
    pub target_uid: ::prost::alloc::string::String,
}
/// *
/// 邀请成员入群
/// 管理员/群成员邀请他人入群。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InviteMemberReq {
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 邀请者 UID
    #[prost(string, tag = "2")]
    pub inviter_uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
    /// 被邀请成员 UID 列表
    #[prost(string, repeated, tag = "4")]
    pub invitee_uid: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// *
/// 群消息发送结构体
/// 由成员发送消息至群组，支持结构化内容（文字、图片等）。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupMessageReq {
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 发送者 UID
    #[prost(string, tag = "2")]
    pub from_uid: ::prost::alloc::string::String,
    /// 群组 ID
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
    /// 消息内容（段结构）
    #[prost(message, repeated, tag = "4")]
    pub contents: ::prost::alloc::vec::Vec<super::message::Segment>,
}
/// Generated client implementations.
pub mod group_rpc_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct GroupRpcServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GroupRpcServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GroupRpcServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GroupRpcServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GroupRpcServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 创建群组（发起方自动成为群主）
        pub async fn create_group(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/CreateGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "CreateGroup",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 修改群资料（头像、名称、简介）
        pub async fn update_group_profile(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateGroupProfileReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/UpdateGroupProfile",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "UpdateGroupProfile",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 解散群组（仅群主）
        pub async fn dismiss_group(
            &mut self,
            request: impl tonic::IntoRequest<super::DismissGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/DismissGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "DismissGroup",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 加入群组（成员主动发起）
        pub async fn join_group(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/JoinGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "JoinGroup",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 退出群组（成员离开）
        pub async fn quit_group(
            &mut self,
            request: impl tonic::IntoRequest<super::QuitGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/QuitGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "QuitGroup",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 移除成员（踢人）
        pub async fn kick_member(
            &mut self,
            request: impl tonic::IntoRequest<super::KickMemberReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/KickMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "KickMember",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 邀请用户入群
        pub async fn invite_member(
            &mut self,
            request: impl tonic::IntoRequest<super::InviteMemberReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/InviteMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "InviteMember",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 群消息发送（结构化聊天消息）
        pub async fn send_group_message(
            &mut self,
            request: impl tonic::IntoRequest<super::GroupMessageReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.group_msg_server.GroupRpcService/SendGroupMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.group_msg_server.GroupRpcService",
                        "SendGroupMessage",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod group_rpc_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GroupRpcServiceServer.
    #[async_trait]
    pub trait GroupRpcService: std::marker::Send + std::marker::Sync + 'static {
        /// 创建群组（发起方自动成为群主）
        async fn create_group(
            &self,
            request: tonic::Request<super::CreateGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 修改群资料（头像、名称、简介）
        async fn update_group_profile(
            &self,
            request: tonic::Request<super::UpdateGroupProfileReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 解散群组（仅群主）
        async fn dismiss_group(
            &self,
            request: tonic::Request<super::DismissGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 加入群组（成员主动发起）
        async fn join_group(
            &self,
            request: tonic::Request<super::JoinGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 退出群组（成员离开）
        async fn quit_group(
            &self,
            request: tonic::Request<super::QuitGroupReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 移除成员（踢人）
        async fn kick_member(
            &self,
            request: tonic::Request<super::KickMemberReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 邀请用户入群
        async fn invite_member(
            &self,
            request: tonic::Request<super::InviteMemberReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 群消息发送（结构化聊天消息）
        async fn send_group_message(
            &self,
            request: tonic::Request<super::GroupMessageReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct GroupRpcServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GroupRpcServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GroupRpcServiceServer<T>
    where
        T: GroupRpcService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/protocol.group_msg_server.GroupRpcService/CreateGroup" => {
                    #[allow(non_camel_case_types)]
                    struct CreateGroupSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::CreateGroupReq>
                    for CreateGroupSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::create_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.group_msg_server.GroupRpcService/UpdateGroupProfile" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateGroupProfileSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::UpdateGroupProfileReq>
                    for UpdateGroupProfileSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateGroupProfileReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::update_group_profile(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateGroupProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.group_msg_server.GroupRpcService/DismissGroup" => {
                    #[allow(non_camel_case_types)]
                    struct DismissGroupSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::DismissGroupReq>
                    for DismissGroupSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DismissGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::dismiss_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DismissGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.group_msg_server.GroupRpcService/JoinGroup" => {
                    #[allow(non_camel_case_types)]
                    struct JoinGroupSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::JoinGroupReq>
                    for JoinGroupSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::join_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = JoinGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.group_msg_server.GroupRpcService/QuitGroup" => {
                    #[allow(non_camel_case_types)]
                    struct QuitGroupSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::QuitGroupReq>
                    for QuitGroupSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuitGroupReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::quit_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QuitGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.group_msg_server.GroupRpcService/KickMember" => {
                    #[allow(non_camel_case_types)]
                    struct KickMemberSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::KickMemberReq>
                    for KickMemberSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::KickMemberReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::kick_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = KickMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.group_msg_server.GroupRpcService/InviteMember" => {
                    #[allow(non_camel_case_types)]
                    struct InviteMemberSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::InviteMemberReq>
                    for InviteMemberSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InviteMemberReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::invite_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InviteMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.group_msg_server.GroupRpcService/SendGroupMessage" => {
                    #[allow(non_camel_case_types)]
                    struct SendGroupMessageSvc<T: GroupRpcService>(pub Arc<T>);
                    impl<
                        T: GroupRpcService,
                    > tonic::server::UnaryService<super::GroupMessageReq>
                    for SendGroupMessageSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GroupMessageReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GroupRpcService>::send_group_message(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendGroupMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for GroupRpcServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "protocol.group_msg_server.GroupRpcService";
    impl<T> tonic::server::NamedService for GroupRpcServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
