// This file is @generated by prost-build.
/// Generated client implementations.
pub mod group_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct GroupServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GroupServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GroupServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GroupServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GroupServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 用户上线，表示用户主动进入某个群组或连接建立
        pub async fn online(
            &mut self,
            request: impl tonic::IntoRequest<super::super::rpc_group_models::OnlineReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/online",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_group_service.GroupService", "online"));
            self.inner.unary(req, path, codec).await
        }
        /// 用户下线，表示用户离开某个群组或断开连接
        pub async fn offline(
            &mut self,
            request: impl tonic::IntoRequest<super::super::rpc_group_models::OfflineReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/offline",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_group_service.GroupService", "offline"));
            self.inner.unary(req, path, codec).await
        }
        /// 分页获取某个群组内当前在线的用户ID列表
        pub async fn get_online_members(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::GetOnlineMembersReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::GetOnlineMembersResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/getOnlineMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rpc_group_service.GroupService", "getOnlineMembers"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 分页获取某个群组的所有成员ID（包含在线与离线）
        pub async fn get_members(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::GetMembersReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::GetMembersRep>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/getMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_group_service.GroupService", "getMembers"));
            self.inner.unary(req, path, codec).await
        }
        /// 创建新的群组，包括基础信息和初始成员列表
        pub async fn create_group(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::CreateGroupReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/createGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rpc_group_service.GroupService", "createGroup"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 解散某个群组，所有成员将自动退出，群数据不可恢复
        pub async fn destroy_group(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::DestroyGroupReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/destroyGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rpc_group_service.GroupService", "destroyGroup"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 获取指定群组的基本信息与成员结构（用于群资料页等）
        pub async fn get_group_info(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::GetGroupInfoReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::GetGroupInfoRep>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/getGroupInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rpc_group_service.GroupService", "getGroupInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 修改群组基础信息，包括名称、头像、描述、加入规则等
        pub async fn update_group_info(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::UpdateGroupInfoReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/updateGroupInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rpc_group_service.GroupService", "updateGroupInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 添加一批成员到群组（通常由管理员或邀请系统发起）
        pub async fn add_member(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::AddMemberReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/addMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_group_service.GroupService", "addMember"));
            self.inner.unary(req, path, codec).await
        }
        /// 将一批成员从群组中移除（可由管理员执行）
        pub async fn remove_member(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::RemoveMemberReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/removeMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rpc_group_service.GroupService", "removeMember"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 当前用户主动退出群组（成员自行触发）
        pub async fn exit_group(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::ExitGroupReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/exitGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_group_service.GroupService", "exitGroup"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改指定成员在群组中的角色权限（管理员/成员）
        pub async fn change_member_role(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::ChangeMemberRoleReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/changeMemberRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rpc_group_service.GroupService", "changeMemberRole"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 设置或取消某个成员的禁言状态
        pub async fn mute_member(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::MuteMemberReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/muteMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_group_service.GroupService", "muteMember"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改成员在群组中的显示昵称（群内别名）
        pub async fn change_member_alias(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::ChangeMemberAliasReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/changeMemberAlias",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rpc_group_service.GroupService",
                        "changeMemberAlias",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 转让群主身份给其他成员（当前群主执行）
        pub async fn transfer_ownership(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_group_models::TransferGroupOwnershipReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::rpc_group_models::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_group_service.GroupService/transferOwnership",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rpc_group_service.GroupService",
                        "transferOwnership",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
