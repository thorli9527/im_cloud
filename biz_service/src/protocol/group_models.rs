// This file is @generated by prost-build.
/// *
/// 创建群组请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupMsg {
    /// 消息唯一标识（用于追踪或幂等）
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 新群组 ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 初始成员列表（包含创建者）
    #[prost(string, repeated, tag = "3")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 群名称
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    /// 群头像 URL
    #[prost(string, tag = "5")]
    pub avatar: ::prost::alloc::string::String,
    /// 群创建者 ID
    #[prost(string, tag = "6")]
    pub creator_id: ::prost::alloc::string::String,
}
/// *
/// 解散群组请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestroyGroupMsg {
    /// 消息唯一标识
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 被解散的群组 ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 操作者 ID（必须为群主）
    #[prost(string, tag = "3")]
    pub operator_id: ::prost::alloc::string::String,
}
/// *
/// 修改群组信息（可用于名称、头像、公告等更新）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeGroupMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 群组 ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 群名称（可选变更）
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// 群头像 URL
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    /// 群公告内容
    #[prost(string, tag = "6")]
    pub notice: ::prost::alloc::string::String,
    /// 群标签（英文逗号分隔）
    #[prost(string, tag = "7")]
    pub tags: ::prost::alloc::string::String,
    /// 修改发起人（群主或管理员）
    #[prost(string, tag = "8")]
    pub operator_id: ::prost::alloc::string::String,
}
/// *
/// 用户申请加入群组（通常由客户端发起）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestJoinGroupMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 目标群组 ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 发起加入请求的用户 ID（支持批量申请）
    #[prost(string, repeated, tag = "3")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// *
/// 管理员处理入群申请
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandleJoinRequestMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 群组 ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 被处理的申请用户 ID
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    /// 是否同意加入（true = 接受）
    #[prost(bool, tag = "4")]
    pub accept: bool,
    /// 处理说明或拒绝理由
    #[prost(string, tag = "5")]
    pub reason: ::prost::alloc::string::String,
    /// 管理员 ID
    #[prost(string, tag = "6")]
    pub operator_id: ::prost::alloc::string::String,
}
/// *
/// 邀请成员加入群组（管理员或群主）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InviteMembersMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 被邀请成员 ID 列表
    #[prost(string, repeated, tag = "3")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 邀请理由（可选）
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
    /// 发起邀请者 ID
    #[prost(string, tag = "5")]
    pub inviter_id: ::prost::alloc::string::String,
}
/// *
/// 被邀请成员处理邀请
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandleInviteMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 被邀请者 ID
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    /// 是否接受邀请
    #[prost(bool, tag = "4")]
    pub accept: bool,
    /// 拒绝理由（如拒绝）
    #[prost(string, tag = "5")]
    pub reason: ::prost::alloc::string::String,
}
/// *
/// 移除成员（管理员操作）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveMembersMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 被移除成员列表
    #[prost(string, repeated, tag = "3")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 踢出原因（可选）
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
    /// 操作者 ID（管理员/群主）
    #[prost(string, tag = "5")]
    pub operator_id: ::prost::alloc::string::String,
}
/// *
/// 成员主动退出群组
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExitGroupMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 退出用户 ID
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    /// 退出原因（可选）
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
}
/// *
/// 修改成员角色（设为管理员、降权等）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeMemberRoleMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 目标成员 ID
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    /// 新角色（如 ADMIN、MEMBER）
    #[prost(enumeration = "super::common::GroupRoleType", tag = "4")]
    pub role: i32,
    /// 操作者 ID
    #[prost(string, tag = "5")]
    pub operator_id: ::prost::alloc::string::String,
    /// 操作说明
    #[prost(string, tag = "6")]
    pub reason: ::prost::alloc::string::String,
}
/// *
/// 设置或取消成员禁言
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MuteMemberMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 被操作成员（支持多人）
    #[prost(string, repeated, tag = "3")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// true = 禁言，false = 取消禁言
    #[prost(bool, tag = "4")]
    pub mute: bool,
    /// 操作理由
    #[prost(string, tag = "5")]
    pub reason: ::prost::alloc::string::String,
    /// 执行者 ID
    #[prost(string, tag = "6")]
    pub operator_id: ::prost::alloc::string::String,
}
/// *
/// 修改成员资料（如群昵称、头像等）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMemberProfileMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    /// 群昵称
    #[prost(string, tag = "4")]
    pub alias: ::prost::alloc::string::String,
    /// 群头像
    #[prost(string, tag = "5")]
    pub avatar: ::prost::alloc::string::String,
}
/// *
/// 转让群主权限
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferOwnershipMsg {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 新群主 ID
    #[prost(string, tag = "3")]
    pub new_owner_id: ::prost::alloc::string::String,
    /// 转让说明
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
    /// 当前群主 ID
    #[prost(string, tag = "5")]
    pub operator_id: ::prost::alloc::string::String,
}
/// *
/// 群成员在线状态
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemberOnlineMsg {
    /// 消息唯一标识
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 群组 ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 成员 ID
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
}
/// 群成员下线消息
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemberOfflineMsg {
    /// 消息唯一标识
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 群组 ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 成员 ID
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
}
/// *
/// 群组节点支持的消息类型枚举（用于 MQ 路由 / 类型标识）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupNodeMsgType {
    /// 未知消息类型（默认）
    UnknownMsgType = 0,
    /// 创建群组
    CreateGroupMsgType = 1,
    /// 修改群组信息
    ChangeGroupMsgType = 2,
    /// 解散群组
    DestroyGroupMsgType = 3,
    /// 成员上线（连接建立或进入群）
    MemberOnlineMsgType = 4,
    /// 成员下线（断开连接或离开群）
    MemberOfflineMsgType = 5,
    /// 用户申请加入群组
    RequestJoinGroupMsgType = 6,
    /// 管理员处理入群申请
    HandleJoinRequestMsgType = 7,
    /// 邀请成员加入群组
    InviteMembersMsgType = 8,
    /// 移除群成员（管理员操作）
    RemoveMembersMsgType = 9,
    /// 成员主动退出群组
    ExitGroupMsgType = 10,
    /// 修改成员角色（如设为管理员）
    ChangeMemberRoleMsgType = 11,
    /// 设置或取消成员禁言
    MuteMemberMsgType = 12,
    /// 修改成员资料（昵称、头像）
    UpdateMemberProfileMsgType = 13,
    /// 转让群主身份
    TransferOwnershipMsgType = 14,
    /// 被邀请人处理邀请
    HandleInviteMsgType = 15,
}
impl GroupNodeMsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownMsgType => "UNKNOWN_MSG_TYPE",
            Self::CreateGroupMsgType => "CREATE_GROUP_MSG_TYPE",
            Self::ChangeGroupMsgType => "CHANGE_GROUP_MSG_TYPE",
            Self::DestroyGroupMsgType => "DESTROY_GROUP_MSG_TYPE",
            Self::MemberOnlineMsgType => "MEMBER_ONLINE_MSG_TYPE",
            Self::MemberOfflineMsgType => "MEMBER_OFFLINE_MSG_TYPE",
            Self::RequestJoinGroupMsgType => "REQUEST_JOIN_GROUP_MSG_TYPE",
            Self::HandleJoinRequestMsgType => "HANDLE_JOIN_REQUEST_MSG_TYPE",
            Self::InviteMembersMsgType => "INVITE_MEMBERS_MSG_TYPE",
            Self::RemoveMembersMsgType => "REMOVE_MEMBERS_MSG_TYPE",
            Self::ExitGroupMsgType => "EXIT_GROUP_MSG_TYPE",
            Self::ChangeMemberRoleMsgType => "CHANGE_MEMBER_ROLE_MSG_TYPE",
            Self::MuteMemberMsgType => "MUTE_MEMBER_MSG_TYPE",
            Self::UpdateMemberProfileMsgType => "UPDATE_MEMBER_PROFILE_MSG_TYPE",
            Self::TransferOwnershipMsgType => "TRANSFER_OWNERSHIP_MSG_TYPE",
            Self::HandleInviteMsgType => "HANDLE_INVITE_MSG_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_MSG_TYPE" => Some(Self::UnknownMsgType),
            "CREATE_GROUP_MSG_TYPE" => Some(Self::CreateGroupMsgType),
            "CHANGE_GROUP_MSG_TYPE" => Some(Self::ChangeGroupMsgType),
            "DESTROY_GROUP_MSG_TYPE" => Some(Self::DestroyGroupMsgType),
            "MEMBER_ONLINE_MSG_TYPE" => Some(Self::MemberOnlineMsgType),
            "MEMBER_OFFLINE_MSG_TYPE" => Some(Self::MemberOfflineMsgType),
            "REQUEST_JOIN_GROUP_MSG_TYPE" => Some(Self::RequestJoinGroupMsgType),
            "HANDLE_JOIN_REQUEST_MSG_TYPE" => Some(Self::HandleJoinRequestMsgType),
            "INVITE_MEMBERS_MSG_TYPE" => Some(Self::InviteMembersMsgType),
            "REMOVE_MEMBERS_MSG_TYPE" => Some(Self::RemoveMembersMsgType),
            "EXIT_GROUP_MSG_TYPE" => Some(Self::ExitGroupMsgType),
            "CHANGE_MEMBER_ROLE_MSG_TYPE" => Some(Self::ChangeMemberRoleMsgType),
            "MUTE_MEMBER_MSG_TYPE" => Some(Self::MuteMemberMsgType),
            "UPDATE_MEMBER_PROFILE_MSG_TYPE" => Some(Self::UpdateMemberProfileMsgType),
            "TRANSFER_OWNERSHIP_MSG_TYPE" => Some(Self::TransferOwnershipMsgType),
            "HANDLE_INVITE_MSG_TYPE" => Some(Self::HandleInviteMsgType),
            _ => None,
        }
    }
}
