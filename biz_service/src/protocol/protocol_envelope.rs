// This file is @generated by prost-build.
/// ================================
/// ✉️ 顶层消息封包结构 Envelope
/// ================================
/// 所有通信内容都通过 Envelope 封装发送，
/// 支持多种消息载荷类型，便于统一协议、传输和扩展。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Envelope {
    /// 封包唯一 ID（可用于链路追踪、日志定位）
    #[prost(string, tag = "1")]
    pub envelope_id: ::prost::alloc::string::String,
    /// 封包类型（CLIENT_TO_SERVER / SERVER_TO_CLIENT / ACK）
    #[prost(enumeration = "EnvelopeType", tag = "2")]
    pub envelope_type: i32,
    /// 封包创建时间戳（毫秒）
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
    /// ================================
    /// 📦 封装负载主体 oneof
    /// ================================
    /// 每个封包只包含一种消息类型，oneof 保证结构唯一性
    #[prost(
        oneof = "envelope::Payload",
        tags = "4, 5, 6, 7, 9, 12, 13, 8, 14, 15, 10, 11, 17, 18, 19, 20"
    )]
    pub payload: ::core::option::Option<envelope::Payload>,
}
/// Nested message and enum types in `Envelope`.
pub mod envelope {
    /// ================================
    /// 📦 封装负载主体 oneof
    /// ================================
    /// 每个封包只包含一种消息类型，oneof 保证结构唯一性
    #[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        /// 🔐 登录认证
        ///
        /// 客户端发起认证请求（连接建立后第一步）
        #[prost(message, tag = "4")]
        AuthRequest(super::super::auth::AuthRequest),
        /// 服务端返回认证结果
        #[prost(message, tag = "5")]
        AuthResponse(super::super::auth::AuthResponse),
        /// 💬 聊天消息
        ///
        /// 普通消息：文本、图片、引用等
        #[prost(message, tag = "6")]
        Message(super::super::message::Message),
        /// 🧾 消息状态类
        ///
        /// 消息已读回执（单聊或群聊）
        #[prost(message, tag = "7")]
        ReadReceipt(super::super::status::ReadReceipt),
        /// 正在输入状态通知
        #[prost(message, tag = "9")]
        TypingNotice(super::super::status::TypingNotice),
        /// 通用 ACK 确认消息
        #[prost(message, tag = "12")]
        Ack(super::super::status::AckMessage),
        /// 心跳包（连接保活）
        #[prost(message, tag = "13")]
        Heartbeat(super::super::status::Heartbeat),
        /// 🛠️ 系统通知
        ///
        /// 系统通知消息（维护、封禁等）
        #[prost(message, tag = "8")]
        SystemNotification(super::super::system::SystemNotification),
        /// 🤝 好友事件类
        ///
        /// 好友请求、同意、拒绝、拉黑等事件
        #[prost(message, tag = "14")]
        FriendEvent(super::super::friend::FriendEventMessage),
        /// 👤 用户/群组变更事件
        ///
        /// 用户资料更新通知（昵称、头像等变更）
        #[prost(message, tag = "15")]
        UserFlush(super::super::user::UserFlush),
        /// 👥 群组结构事件
        ///
        /// 群成员增删、禁言、踢人等
        #[prost(message, tag = "10")]
        GroupMemberChange(super::super::gi::GroupMemberChange),
        /// 群属性字段变更（单字段）
        #[prost(message, tag = "11")]
        GroupAttributeChange(super::super::gi::GroupAttributeChange),
        /// 创建群聊成功事件
        #[prost(message, tag = "17")]
        GroupCreate(super::super::gi::GroupCreateMessage),
        /// 群聊被解散通知
        #[prost(message, tag = "18")]
        GroupDismiss(super::super::gi::GroupDismissMessage),
        /// 群主转让事件
        #[prost(message, tag = "19")]
        GroupTransfer(super::super::gi::GroupTransferMessage),
        /// 群公告更新事件
        #[prost(message, tag = "20")]
        GroupAnnouncement(super::super::gi::GroupAnnouncementMessage),
    }
}
/// ================================
/// ✉️ 封包类型枚举
/// ================================
/// 用于标记封包方向/语义，便于服务端路由与客户端解析
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnvelopeType {
    /// 客户端 → 服务端请求消息（如发消息、认证等）
    ClientToServer = 0,
    /// 服务端 → 客户端推送（如通知、新消息等）
    ServerToClient = 1,
    /// 客户端/服务端互相确认消息（用于可靠通信/追踪）
    Ack = 2,
}
impl EnvelopeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ClientToServer => "CLIENT_TO_SERVER",
            Self::ServerToClient => "SERVER_TO_CLIENT",
            Self::Ack => "ACK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLIENT_TO_SERVER" => Some(Self::ClientToServer),
            "SERVER_TO_CLIENT" => Some(Self::ServerToClient),
            "ACK" => Some(Self::Ack),
            _ => None,
        }
    }
}
