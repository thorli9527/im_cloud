// This file is @generated by prost-build.
/// ======================================
/// 💬 消息类型枚举（用于标记主消息类型）
/// ======================================
/// 每条消息将根据其主内容赋予一个主类型，便于前端渲染和后端分类处理。
/// 注意：具体内容仍以 MessageContent 的 oneof 实体为准，ContentType 仅为索引分类用途。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentType {
    /// 未知类型：默认值，用于防御性处理或解析失败情况
    Unknown = 0,
    /// 文本消息：纯文本内容
    Text = 1,
    /// 图片消息：包含图片地址、尺寸、缩略图等信息
    Image = 2,
    /// 音频消息：语音聊天或语音留言
    Audio = 3,
    /// 视频消息：播放地址、封面图、时长等
    Video = 4,
    /// HTML 富文本消息：用于结构化卡片、网页链接等
    Html = 5,
    /// 位置消息：经纬度、地址描述等
    Location = 6,
    /// 文件消息：支持任意文件格式，如 PDF、Word、ZIP 等
    File = 7,
    /// 表情消息：标准 emoji 或自定义动态/静态表情
    Emoji = 8,
    /// 引用消息：引用历史消息的内容并附加回复
    Quote = 9,
    /// 音视频通话信令：如邀请、接听、挂断等
    AvCall = 10,
    /// VOIP 通话记录：用于保存通话日志
    Voip = 11,
    /// 通知消息：系统推送提示、公告等
    Notification = 12,
    /// 系统消息：如封号、强制下线、服务器维护通知等
    System = 13,
    /// 提醒消息：如代办事项、日程提醒等
    Reminder = 14,
    /// 好友事件：加好友、被删除、拉黑等事件
    FriendEvent = 15,
    /// 群组事件：如被踢出群、群解散、管理员变更等
    GroupEvent = 16,
    /// 消息撤回：通知客户端某条消息已被撤回
    Revoke = 17,
    /// 转发消息：引用其他消息的复用/转发版本
    Forward = 18,
    /// 可选扩展类型（根据业务需要添加）
    ///
    /// 名片消息：用户或群的联系人分享
    ContactCard = 19,
    /// 投票消息：包含投票标题、选项、结果等信息
    Vote = 20,
    /// 红包消息：用于节日、福利等场景
    RedEnvelope = 21,
    /// 自定义消息：开发者自定义结构，通常以 JSON 承载
    Custom = 100,
}
impl ContentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Text => "TEXT",
            Self::Image => "IMAGE",
            Self::Audio => "AUDIO",
            Self::Video => "VIDEO",
            Self::Html => "HTML",
            Self::Location => "LOCATION",
            Self::File => "FILE",
            Self::Emoji => "EMOJI",
            Self::Quote => "QUOTE",
            Self::AvCall => "AV_CALL",
            Self::Voip => "VOIP",
            Self::Notification => "NOTIFICATION",
            Self::System => "SYSTEM",
            Self::Reminder => "REMINDER",
            Self::FriendEvent => "FRIEND_EVENT",
            Self::GroupEvent => "GROUP_EVENT",
            Self::Revoke => "REVOKE",
            Self::Forward => "FORWARD",
            Self::ContactCard => "CONTACT_CARD",
            Self::Vote => "VOTE",
            Self::RedEnvelope => "RED_ENVELOPE",
            Self::Custom => "CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "TEXT" => Some(Self::Text),
            "IMAGE" => Some(Self::Image),
            "AUDIO" => Some(Self::Audio),
            "VIDEO" => Some(Self::Video),
            "HTML" => Some(Self::Html),
            "LOCATION" => Some(Self::Location),
            "FILE" => Some(Self::File),
            "EMOJI" => Some(Self::Emoji),
            "QUOTE" => Some(Self::Quote),
            "AV_CALL" => Some(Self::AvCall),
            "VOIP" => Some(Self::Voip),
            "NOTIFICATION" => Some(Self::Notification),
            "SYSTEM" => Some(Self::System),
            "REMINDER" => Some(Self::Reminder),
            "FRIEND_EVENT" => Some(Self::FriendEvent),
            "GROUP_EVENT" => Some(Self::GroupEvent),
            "REVOKE" => Some(Self::Revoke),
            "FORWARD" => Some(Self::Forward),
            "CONTACT_CARD" => Some(Self::ContactCard),
            "VOTE" => Some(Self::Vote),
            "RED_ENVELOPE" => Some(Self::RedEnvelope),
            "CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
/// ======================================
/// 🎯 聊天目标类型枚举
/// ======================================
/// 用于标识消息的接收目标类型，帮助客户端和服务端进行不同的处理逻辑
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatTargetType {
    /// 未知类型：默认值，用于防御性处理或解析失败情况
    UnKnown = 0,
    /// 群聊目标：消息发送到群组
    Group = 1,
    /// 单聊目标：消息发送到个人用户
    Single = 2,
}
impl ChatTargetType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnKnown => "UN_KNOWN",
            Self::Group => "GROUP",
            Self::Single => "SINGLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UN_KNOWN" => Some(Self::UnKnown),
            "GROUP" => Some(Self::Group),
            "SINGLE" => Some(Self::Single),
            _ => None,
        }
    }
}
/// ======================================
/// 📦 字节消息类型枚举
/// ======================================
/// 用于标识通过 WebSocket 传输的二进制消息类型
/// 这些类型用于消息路由和分发，确保消息被正确处理
/// 消息类型枚举：用于标识通信协议中的消息分类
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ByteMessageType {
    /// 未知消息类型（默认）：用于解析错误或未定义处理
    UnknownByteMessageType = 0,
    /// 系统基础通信（1~9）
    ///
    /// 心跳消息：保持连接活跃
    HeartbeatMsgType = 1,
    /// 认证请求：客户端发起身份验证
    LoginReqMsgType = 2,
    /// 认证响应：服务端返回认证结果
    LoginRespMsgType = 3,
    /// 登出请求：客户端主动断开连接
    LogoutReqMsgType = 4,
    /// 登出响应：服务端确认登出状态
    LogoutRespMsgType = 5,
    /// 验证码请求：短信/邮件验证码发送请求
    SendVerificationCodeReqMsgType = 6,
    /// 验证码响应：验证码发送处理结果
    SendVerificationCodeRepMsgType = 7,
    /// 系统通知：平台或服务级消息
    SystemNotificationMsgType = 8,
    /// 用户刷新：资料/状态/配置变更通知
    UserFlushMsgType = 9,
    /// 用户在线状态（10~19）
    ///
    /// 用户上线通知
    OnlineStatusMsgType = 10,
    /// 用户下线通知
    OfflineStatusMsgType = 11,
    /// 聊天消息（20~29）
    ///
    /// 单聊消息
    UserMsgType = 20,
    /// 群聊消息
    GroupMsgType = 21,
    /// 好友 / 群组事件（30~39）
    ///
    /// 好友事件：申请、同意、删除等
    FriendEventMsgType = 30,
    /// 群创建通知
    GroupCreateMsgType = 31,
    /// 群解散通知
    GroupDismissMsgType = 32,
}
impl ByteMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownByteMessageType => "UNKNOWN_BYTE_MESSAGE_TYPE",
            Self::HeartbeatMsgType => "HeartbeatMsgType",
            Self::LoginReqMsgType => "LoginReqMsgType",
            Self::LoginRespMsgType => "LoginRespMsgType",
            Self::LogoutReqMsgType => "LogoutReqMsgType",
            Self::LogoutRespMsgType => "LogoutRespMsgType",
            Self::SendVerificationCodeReqMsgType => "SendVerificationCodeReqMsgType",
            Self::SendVerificationCodeRepMsgType => "SendVerificationCodeRepMsgType",
            Self::SystemNotificationMsgType => "SystemNotificationMsgType",
            Self::UserFlushMsgType => "UserFlushMsgType",
            Self::OnlineStatusMsgType => "OnlineStatusMsgType",
            Self::OfflineStatusMsgType => "OfflineStatusMsgType",
            Self::UserMsgType => "UserMsgType",
            Self::GroupMsgType => "GroupMsgType",
            Self::FriendEventMsgType => "FriendEventMsgType",
            Self::GroupCreateMsgType => "GroupCreateMsgType",
            Self::GroupDismissMsgType => "GroupDismissMsgType",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_BYTE_MESSAGE_TYPE" => Some(Self::UnknownByteMessageType),
            "HeartbeatMsgType" => Some(Self::HeartbeatMsgType),
            "LoginReqMsgType" => Some(Self::LoginReqMsgType),
            "LoginRespMsgType" => Some(Self::LoginRespMsgType),
            "LogoutReqMsgType" => Some(Self::LogoutReqMsgType),
            "LogoutRespMsgType" => Some(Self::LogoutRespMsgType),
            "SendVerificationCodeReqMsgType" => {
                Some(Self::SendVerificationCodeReqMsgType)
            }
            "SendVerificationCodeRepMsgType" => {
                Some(Self::SendVerificationCodeRepMsgType)
            }
            "SystemNotificationMsgType" => Some(Self::SystemNotificationMsgType),
            "UserFlushMsgType" => Some(Self::UserFlushMsgType),
            "OnlineStatusMsgType" => Some(Self::OnlineStatusMsgType),
            "OfflineStatusMsgType" => Some(Self::OfflineStatusMsgType),
            "UserMsgType" => Some(Self::UserMsgType),
            "GroupMsgType" => Some(Self::GroupMsgType),
            "FriendEventMsgType" => Some(Self::FriendEventMsgType),
            "GroupCreateMsgType" => Some(Self::GroupCreateMsgType),
            "GroupDismissMsgType" => Some(Self::GroupDismissMsgType),
            _ => None,
        }
    }
}
