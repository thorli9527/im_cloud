// This file is @generated by prost-build.
/// *
/// 添加好友请求消息
/// 由发起方（from_uid）发送给接收方（to_uid）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddFriendReqMsg {
    /// 当前消息的唯一 ID（用于 ACK、幂等判断）
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 发起添加请求的用户 ID（申请人）
    #[prost(string, tag = "2")]
    pub from_uid: ::prost::alloc::string::String,
    /// 目标用户 ID（被加好友对象）
    #[prost(string, tag = "3")]
    pub to_uid: ::prost::alloc::string::String,
    /// 添加理由（附加消息）
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
}
/// *
/// 接受或拒绝好友请求消息
/// 由接收方（acceptor_uid）处理请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptFriendReqMsg {
    /// 当前消息的唯一 ID
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 接受请求的用户 ID
    #[prost(string, tag = "2")]
    pub acceptor_uid: ::prost::alloc::string::String,
    /// 发起好友请求的用户 ID
    #[prost(string, tag = "3")]
    pub requestor_uid: ::prost::alloc::string::String,
    /// 是否接受（true：接受；false：拒绝）
    #[prost(bool, tag = "4")]
    pub accept: bool,
    /// 拒绝理由或备注
    #[prost(string, tag = "5")]
    pub reason: ::prost::alloc::string::String,
}
/// *
/// 删除好友请求
/// 可由任何一方单向发起删除
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteFriendReqMsg {
    /// 当前消息的唯一 ID
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 发起删除操作的用户 ID
    #[prost(string, tag = "2")]
    pub from_uid: ::prost::alloc::string::String,
    /// 被删除的用户 ID
    #[prost(string, tag = "3")]
    pub to_uid: ::prost::alloc::string::String,
}
/// *
/// 返回好友 UID 列表
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendListRespMsg {
    /// 好友用户 ID 列表
    #[prost(string, repeated, tag = "1")]
    pub uid: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// *
/// 好友消息发送结构体（用于消息中转层）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMessageRespMsg {
    /// 消息 ID
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 发送者 UID
    #[prost(string, tag = "2")]
    pub from_uid: ::prost::alloc::string::String,
    /// 接收者 UID
    #[prost(string, tag = "3")]
    pub to_uid: ::prost::alloc::string::String,
    /// 消息内容结构（段落组合，支持文本、图片等）
    #[prost(message, repeated, tag = "10")]
    pub contents: ::prost::alloc::vec::Vec<super::message::Segment>,
}
/// *
/// 修改好友信息
/// 备注、别名等字段，影响当前用户视角
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeFriendReqMsg {
    /// 请求 ID
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 修改者（当前用户）
    #[prost(string, tag = "2")]
    pub from_uid: ::prost::alloc::string::String,
    /// 被修改的好友
    #[prost(string, tag = "3")]
    pub to_uid: ::prost::alloc::string::String,
    /// 自定义名称
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// 备注内容
    #[prost(string, optional, tag = "5")]
    pub remark: ::core::option::Option<::prost::alloc::string::String>,
}
/// Generated client implementations.
pub mod friend_rpc_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct FriendRpcServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FriendRpcServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FriendRpcServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FriendRpcServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FriendRpcServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 添加好友请求（发起申请）
        pub async fn add_friend_req(
            &mut self,
            request: impl tonic::IntoRequest<super::AddFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.friend_msg_server.FriendRpcService/AddFriendReq",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.friend_msg_server.FriendRpcService",
                        "AddFriendReq",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 接受或拒绝好友请求
        pub async fn accept_friend_req(
            &mut self,
            request: impl tonic::IntoRequest<super::AcceptFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.friend_msg_server.FriendRpcService/AcceptFriendReq",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.friend_msg_server.FriendRpcService",
                        "AcceptFriendReq",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 删除好友（双向或单向解除）
        pub async fn delete_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.friend_msg_server.FriendRpcService/DeleteFriend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.friend_msg_server.FriendRpcService",
                        "DeleteFriend",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 获取当前用户的好友列表
        pub async fn get_friend_list(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::common::IdReq>,
        ) -> std::result::Result<
            tonic::Response<super::FriendListRespMsg>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.friend_msg_server.FriendRpcService/GetFriendList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.friend_msg_server.FriendRpcService",
                        "GetFriendList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 向好友发送消息（聊天）
        pub async fn send_message(
            &mut self,
            request: impl tonic::IntoRequest<super::SendMessageRespMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.friend_msg_server.FriendRpcService/SendMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.friend_msg_server.FriendRpcService",
                        "SendMessage",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 修改好友信息（备注名、别名）
        pub async fn change_friend(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protocol.friend_msg_server.FriendRpcService/ChangeFriend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "protocol.friend_msg_server.FriendRpcService",
                        "ChangeFriend",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod friend_rpc_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with FriendRpcServiceServer.
    #[async_trait]
    pub trait FriendRpcService: std::marker::Send + std::marker::Sync + 'static {
        /// 添加好友请求（发起申请）
        async fn add_friend_req(
            &self,
            request: tonic::Request<super::AddFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 接受或拒绝好友请求
        async fn accept_friend_req(
            &self,
            request: tonic::Request<super::AcceptFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 删除好友（双向或单向解除）
        async fn delete_friend(
            &self,
            request: tonic::Request<super::DeleteFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 获取当前用户的好友列表
        async fn get_friend_list(
            &self,
            request: tonic::Request<super::super::super::common::IdReq>,
        ) -> std::result::Result<
            tonic::Response<super::FriendListRespMsg>,
            tonic::Status,
        >;
        /// 向好友发送消息（聊天）
        async fn send_message(
            &self,
            request: tonic::Request<super::SendMessageRespMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
        /// 修改好友信息（备注名、别名）
        async fn change_friend(
            &self,
            request: tonic::Request<super::ChangeFriendReqMsg>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::common::CommonResp>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct FriendRpcServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> FriendRpcServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for FriendRpcServiceServer<T>
    where
        T: FriendRpcService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/protocol.friend_msg_server.FriendRpcService/AddFriendReq" => {
                    #[allow(non_camel_case_types)]
                    struct AddFriendReqSvc<T: FriendRpcService>(pub Arc<T>);
                    impl<
                        T: FriendRpcService,
                    > tonic::server::UnaryService<super::AddFriendReqMsg>
                    for AddFriendReqSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddFriendReqMsg>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendRpcService>::add_friend_req(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddFriendReqSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.friend_msg_server.FriendRpcService/AcceptFriendReq" => {
                    #[allow(non_camel_case_types)]
                    struct AcceptFriendReqSvc<T: FriendRpcService>(pub Arc<T>);
                    impl<
                        T: FriendRpcService,
                    > tonic::server::UnaryService<super::AcceptFriendReqMsg>
                    for AcceptFriendReqSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AcceptFriendReqMsg>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendRpcService>::accept_friend_req(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AcceptFriendReqSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.friend_msg_server.FriendRpcService/DeleteFriend" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteFriendSvc<T: FriendRpcService>(pub Arc<T>);
                    impl<
                        T: FriendRpcService,
                    > tonic::server::UnaryService<super::DeleteFriendReqMsg>
                    for DeleteFriendSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteFriendReqMsg>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendRpcService>::delete_friend(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteFriendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.friend_msg_server.FriendRpcService/GetFriendList" => {
                    #[allow(non_camel_case_types)]
                    struct GetFriendListSvc<T: FriendRpcService>(pub Arc<T>);
                    impl<
                        T: FriendRpcService,
                    > tonic::server::UnaryService<super::super::super::common::IdReq>
                    for GetFriendListSvc<T> {
                        type Response = super::FriendListRespMsg;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::common::IdReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendRpcService>::get_friend_list(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFriendListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.friend_msg_server.FriendRpcService/SendMessage" => {
                    #[allow(non_camel_case_types)]
                    struct SendMessageSvc<T: FriendRpcService>(pub Arc<T>);
                    impl<
                        T: FriendRpcService,
                    > tonic::server::UnaryService<super::SendMessageRespMsg>
                    for SendMessageSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendMessageRespMsg>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendRpcService>::send_message(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/protocol.friend_msg_server.FriendRpcService/ChangeFriend" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeFriendSvc<T: FriendRpcService>(pub Arc<T>);
                    impl<
                        T: FriendRpcService,
                    > tonic::server::UnaryService<super::ChangeFriendReqMsg>
                    for ChangeFriendSvc<T> {
                        type Response = super::super::super::common::CommonResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeFriendReqMsg>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FriendRpcService>::change_friend(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeFriendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for FriendRpcServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "protocol.friend_msg_server.FriendRpcService";
    impl<T> tonic::server::NamedService for FriendRpcServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
