// This file is @generated by prost-build.
/// ========================================
/// 👥 群成员变更事件（加人、踢人、禁言等）
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupMemberChange {
    /// 群组 ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 操作者 ID（如群主、管理员）
    #[prost(string, tag = "2")]
    pub operator_id: ::prost::alloc::string::String,
    /// 被操作的用户 ID 列表（可能为多个）
    #[prost(string, repeated, tag = "3")]
    pub affected_users: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 操作类型（枚举定义如下）
    #[prost(enumeration = "GroupChangeType", tag = "4")]
    pub change_type: i32,
    /// 操作时间戳（毫秒）
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
}
/// ========================================
/// 🛠 群属性变更通知（单字段修改）
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupAttributeChange {
    /// 群组 ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 被修改的字段键名（使用枚举，见下）
    #[prost(enumeration = "GroupAttributeKey", tag = "2")]
    pub key: i32,
    /// 修改前的值
    #[prost(string, tag = "3")]
    pub old_value: ::prost::alloc::string::String,
    /// 修改后的值
    #[prost(string, tag = "4")]
    pub new_value: ::prost::alloc::string::String,
    /// 操作者 ID（如管理员）
    #[prost(string, tag = "5")]
    pub operator_id: ::prost::alloc::string::String,
    /// 变更时间戳（毫秒）
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
}
/// ========================================
/// ➕ 群创建事件消息（通常由服务端广播）
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupCreateMessage {
    /// 新建群组 ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 创建者用户 ID
    #[prost(string, tag = "2")]
    pub creator_id: ::prost::alloc::string::String,
    /// 初始成员列表（包含创建者）
    #[prost(string, repeated, tag = "3")]
    pub member_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 群名称
    #[prost(string, tag = "4")]
    pub group_name: ::prost::alloc::string::String,
    /// 群创建时间戳（毫秒）
    #[prost(int64, tag = "5")]
    pub created_at: i64,
}
/// ========================================
/// ❌ 群解散通知
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupDismissMessage {
    /// 被解散的群组 ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 解散操作者 ID（如群主、系统管理员）
    #[prost(string, tag = "2")]
    pub operator_id: ::prost::alloc::string::String,
    /// 解散时间戳（毫秒）
    #[prost(int64, tag = "3")]
    pub dismissed_at: i64,
}
/// ========================================
/// 👑 群主转让事件
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupTransferMessage {
    /// 群组 ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 原群主 ID
    #[prost(string, tag = "2")]
    pub old_owner_id: ::prost::alloc::string::String,
    /// 新群主 ID
    #[prost(string, tag = "3")]
    pub new_owner_id: ::prost::alloc::string::String,
    /// 转让时间戳（毫秒）
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
}
/// ========================================
/// 📣 群公告更新消息
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupAnnouncementMessage {
    /// 群组 ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 公告内容（纯文本）
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    /// 公告发布者 ID
    #[prost(string, tag = "3")]
    pub operator_id: ::prost::alloc::string::String,
    /// 发布时间戳（毫秒）
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
}
/// ========================================
/// 🔁 群成员变更类型（操作类型枚举）
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupChangeType {
    /// 未知操作
    GroupChangeUnknown = 0,
    /// 添加成员
    GroupAdd = 1,
    /// 移除成员
    GroupRemove = 2,
    /// 禁言成员
    GroupMute = 3,
    /// 解除禁言
    GroupUnmute = 4,
    /// 升为管理员
    GroupPromote = 5,
    /// 降为普通成员
    GroupDemote = 6,
    /// 邀请加入
    GroupInvite = 7,
    /// 主动退出群聊
    GroupLeave = 8,
    /// 踢出群聊（等价于 REMOVE，可细分）
    GroupKick = 9,
    /// 重新加入群聊
    GroupRejoin = 10,
}
impl GroupChangeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GroupChangeUnknown => "GROUP_CHANGE_UNKNOWN",
            Self::GroupAdd => "GROUP_ADD",
            Self::GroupRemove => "GROUP_REMOVE",
            Self::GroupMute => "GROUP_MUTE",
            Self::GroupUnmute => "GROUP_UNMUTE",
            Self::GroupPromote => "GROUP_PROMOTE",
            Self::GroupDemote => "GROUP_DEMOTE",
            Self::GroupInvite => "GROUP_INVITE",
            Self::GroupLeave => "GROUP_LEAVE",
            Self::GroupKick => "GROUP_KICK",
            Self::GroupRejoin => "GROUP_REJOIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROUP_CHANGE_UNKNOWN" => Some(Self::GroupChangeUnknown),
            "GROUP_ADD" => Some(Self::GroupAdd),
            "GROUP_REMOVE" => Some(Self::GroupRemove),
            "GROUP_MUTE" => Some(Self::GroupMute),
            "GROUP_UNMUTE" => Some(Self::GroupUnmute),
            "GROUP_PROMOTE" => Some(Self::GroupPromote),
            "GROUP_DEMOTE" => Some(Self::GroupDemote),
            "GROUP_INVITE" => Some(Self::GroupInvite),
            "GROUP_LEAVE" => Some(Self::GroupLeave),
            "GROUP_KICK" => Some(Self::GroupKick),
            "GROUP_REJOIN" => Some(Self::GroupRejoin),
            _ => None,
        }
    }
}
/// ========================================
/// 🧾 群字段枚举（仅允许可修改字段）
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupAttributeKey {
    /// 未知字段（容错）
    AttributeUnknown = 0,
    /// 群名称
    Name = 1,
    /// 群头像 URL
    Avatar = 2,
    /// 群公告（文本）
    Notice = 3,
    /// 全体禁言状态（true/false）
    MuteAll = 4,
    /// 是否仅群主/管理员可邀请（true/false）
    InviteOnly = 5,
    /// 历史消息是否可见
    HistoryVisible = 6,
    /// 群成员上限
    MaxMemberLimit = 7,
    /// 加群验证方式（开放/需审批/关闭）
    VerificationType = 8,
}
impl GroupAttributeKey {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AttributeUnknown => "ATTRIBUTE_UNKNOWN",
            Self::Name => "NAME",
            Self::Avatar => "AVATAR",
            Self::Notice => "NOTICE",
            Self::MuteAll => "MUTE_ALL",
            Self::InviteOnly => "INVITE_ONLY",
            Self::HistoryVisible => "HISTORY_VISIBLE",
            Self::MaxMemberLimit => "MAX_MEMBER_LIMIT",
            Self::VerificationType => "VERIFICATION_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ATTRIBUTE_UNKNOWN" => Some(Self::AttributeUnknown),
            "NAME" => Some(Self::Name),
            "AVATAR" => Some(Self::Avatar),
            "NOTICE" => Some(Self::Notice),
            "MUTE_ALL" => Some(Self::MuteAll),
            "INVITE_ONLY" => Some(Self::InviteOnly),
            "HISTORY_VISIBLE" => Some(Self::HistoryVisible),
            "MAX_MEMBER_LIMIT" => Some(Self::MaxMemberLimit),
            "VERIFICATION_TYPE" => Some(Self::VerificationType),
            _ => None,
        }
    }
}
