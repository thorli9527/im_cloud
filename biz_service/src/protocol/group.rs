// This file is @generated by prost-build.
/// ========================================
/// 📦 群事件通用消息（成员、属性、转让群主）
/// ========================================
/// 用于传递群组中的各种事件，包括成员变更、属性修改等
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupEventContent {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(uint64, optional, tag = "1")]
    pub message_id: ::core::option::Option<u64>,
    /// 群组 ID：发生事件的群组标识
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 事件类型：具体的事件类型枚举值
    #[prost(enumeration = "GroupEventType", tag = "3")]
    pub event_type: i32,
    /// 发起者（操作者）用户 ID：执行操作的用户
    #[prost(string, tag = "4")]
    pub operator_id: ::prost::alloc::string::String,
    /// 被操作的用户 ID（适用于成员操作/群主转让）
    #[prost(string, repeated, tag = "5")]
    pub affected_user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 旧值（仅属性变更或转让使用）：修改前的值
    #[prost(string, tag = "6")]
    pub old_value: ::prost::alloc::string::String,
    /// 新值（仅属性变更或转让使用）：修改后的值
    #[prost(string, tag = "7")]
    pub new_value: ::prost::alloc::string::String,
    /// 操作时间戳（毫秒）：事件发生的时间
    #[prost(uint64, tag = "8")]
    pub timestamp: u64,
}
/// ========================================
/// ➕ 群创建事件消息（通常由服务端广播）
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupCreateMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// 群 ID，可为自定义 UUID 或数值型
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 群名称
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// 群头像 URL（可为空）
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    /// 创建者用户 ID
    #[prost(string, tag = "6")]
    pub creator_id: ::prost::alloc::string::String,
    /// 初始成员用户 ID 列表
    #[prost(string, repeated, tag = "7")]
    pub member_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 群主用户 ID（可与创建者不同）
    #[prost(string, tag = "8")]
    pub owner_id: ::prost::alloc::string::String,
    /// 是否需要审核加入
    #[prost(bool, tag = "9")]
    pub need_approval: bool,
    /// 是否允许通过搜索加入
    #[prost(bool, tag = "10")]
    pub allow_search: bool,
    /// 群创建时间（毫秒时间戳）
    #[prost(uint64, tag = "11")]
    pub create_time: u64,
    /// 可选扩展字段（用于灰度、业务扩展等）
    #[prost(string, tag = "99")]
    pub ext: ::prost::alloc::string::String,
}
/// ========================================
/// ❌ 群解散通知
/// ========================================
/// 当群组被解散时，服务端会向所有群成员推送此消息
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupDismissMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(uint64, optional, tag = "1")]
    pub message_id: ::core::option::Option<u64>,
    /// 被解散的群组 ID：解散的群组标识
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 解散操作者 ID（如群主、系统管理员）：执行解散操作的用户
    #[prost(string, tag = "3")]
    pub operator_id: ::prost::alloc::string::String,
    /// 解散时间戳（毫秒）：群组解散的时间
    #[prost(int64, tag = "4")]
    pub dismissed_at: i64,
}
/// ========================================
/// 🔁 群成员变更类型（操作类型枚举）
/// ========================================
/// 定义了群组中可能发生的各种事件类型，用于标识具体的操作行为
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupEventType {
    /// === 公共: 通用/容错 ===
    ///
    /// 未知类型（容错）
    GroupChangeUnknown = 0,
    /// === 👥 群成员操作 ===
    ///
    /// 添加成员：邀请新用户加入群组
    GroupAdd = 1,
    /// 移除成员：将成员从群组中移除
    GroupRemove = 2,
    /// 禁言成员：禁止某成员发言
    GroupMute = 3,
    /// 解除禁言：恢复某成员的发言权限
    GroupUnmute = 4,
    /// 升为管理员：将普通成员提升为管理员
    GroupPromote = 5,
    /// 降为普通成员：将管理员降级为普通成员
    GroupDemote = 6,
    /// 邀请加入：发送群组邀请
    GroupInvite = 7,
    /// 主动退出群聊：成员主动离开群组
    GroupLeave = 8,
    /// 踢出群聊：强制移除成员（等价于 REMOVE）
    GroupKick = 9,
    /// 重新加入群聊：被踢出后重新加入
    GroupRejoin = 10,
    /// 转让群主：群主权限转移给其他成员
    GroupTransferOwner = 11,
    /// === 🛠 群属性操作 ===
    ///
    /// 修改群名称：更新群组显示名称
    ChangeName = 100,
    /// 修改头像：更新群组头像
    ChangeAvatar = 101,
    /// 修改公告：更新群组公告内容
    ChangeNotice = 102,
    /// 修改全体禁言状态：开启/关闭全员禁言
    ChangeMuteAll = 103,
    /// 修改邀请权限：设置谁可以邀请新成员
    ChangeInviteOnly = 104,
    /// 修改历史消息可见性：新成员是否可见历史消息
    ChangeHistoryVisible = 105,
    /// 修改最大成员数：调整群组人数上限
    ChangeMaxMemberLimit = 106,
    /// 修改加群验证方式：设置加群是否需要验证
    ChangeVerificationType = 107,
}
impl GroupEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GroupChangeUnknown => "GROUP_CHANGE_UNKNOWN",
            Self::GroupAdd => "GROUP_ADD",
            Self::GroupRemove => "GROUP_REMOVE",
            Self::GroupMute => "GROUP_MUTE",
            Self::GroupUnmute => "GROUP_UNMUTE",
            Self::GroupPromote => "GROUP_PROMOTE",
            Self::GroupDemote => "GROUP_DEMOTE",
            Self::GroupInvite => "GROUP_INVITE",
            Self::GroupLeave => "GROUP_LEAVE",
            Self::GroupKick => "GROUP_KICK",
            Self::GroupRejoin => "GROUP_REJOIN",
            Self::GroupTransferOwner => "GROUP_TRANSFER_OWNER",
            Self::ChangeName => "CHANGE_NAME",
            Self::ChangeAvatar => "CHANGE_AVATAR",
            Self::ChangeNotice => "CHANGE_NOTICE",
            Self::ChangeMuteAll => "CHANGE_MUTE_ALL",
            Self::ChangeInviteOnly => "CHANGE_INVITE_ONLY",
            Self::ChangeHistoryVisible => "CHANGE_HISTORY_VISIBLE",
            Self::ChangeMaxMemberLimit => "CHANGE_MAX_MEMBER_LIMIT",
            Self::ChangeVerificationType => "CHANGE_VERIFICATION_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROUP_CHANGE_UNKNOWN" => Some(Self::GroupChangeUnknown),
            "GROUP_ADD" => Some(Self::GroupAdd),
            "GROUP_REMOVE" => Some(Self::GroupRemove),
            "GROUP_MUTE" => Some(Self::GroupMute),
            "GROUP_UNMUTE" => Some(Self::GroupUnmute),
            "GROUP_PROMOTE" => Some(Self::GroupPromote),
            "GROUP_DEMOTE" => Some(Self::GroupDemote),
            "GROUP_INVITE" => Some(Self::GroupInvite),
            "GROUP_LEAVE" => Some(Self::GroupLeave),
            "GROUP_KICK" => Some(Self::GroupKick),
            "GROUP_REJOIN" => Some(Self::GroupRejoin),
            "GROUP_TRANSFER_OWNER" => Some(Self::GroupTransferOwner),
            "CHANGE_NAME" => Some(Self::ChangeName),
            "CHANGE_AVATAR" => Some(Self::ChangeAvatar),
            "CHANGE_NOTICE" => Some(Self::ChangeNotice),
            "CHANGE_MUTE_ALL" => Some(Self::ChangeMuteAll),
            "CHANGE_INVITE_ONLY" => Some(Self::ChangeInviteOnly),
            "CHANGE_HISTORY_VISIBLE" => Some(Self::ChangeHistoryVisible),
            "CHANGE_MAX_MEMBER_LIMIT" => Some(Self::ChangeMaxMemberLimit),
            "CHANGE_VERIFICATION_TYPE" => Some(Self::ChangeVerificationType),
            _ => None,
        }
    }
}
