// This file is @generated by prost-build.
/// ================================
/// 🔐 客户端发起的认证请求消息
/// ================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthRequest {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 客户端的身份凭证（如登录后返回的 token 或 API key）
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    /// 请求ip
    #[prost(string, tag = "4")]
    pub ip: ::prost::alloc::string::String,
    /// 客户端设备类型，用于区分来源平台
    #[prost(enumeration = "DeviceType", tag = "5")]
    pub device_type: i32,
}
/// ================================
/// 🛡️ 服务端返回的认证响应
/// ================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthResponse {
    /// 响应对应的消息 ID（与请求中的保持一致）
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 认证是否成功
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// 额外提示信息，如错误原因或成功说明
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// ========================================
/// 📩 发送验证码请求
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendVerificationCodeRequest {
    /// 唯一请求 ID（用于追踪或幂等处理）
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 接收目标（手机号或邮箱）
    #[prost(string, tag = "2")]
    pub receiver: ::prost::alloc::string::String,
    /// 渠道类型（如 sms / email / voice）
    #[prost(string, tag = "3")]
    pub channel: ::prost::alloc::string::String,
    /// 场景标识（如 login / register / reset_pwd）
    #[prost(string, tag = "4")]
    pub scene: ::prost::alloc::string::String,
    /// 客户端 ID 或设备标识（可用于风控）
    #[prost(string, tag = "5")]
    pub uid: ::prost::alloc::string::String,
}
/// ========================================
/// ✅ 发送验证码响应
/// ========================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendVerificationCodeResponse {
    /// 与请求一致的 ID
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 是否发送成功
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// 附加消息，如错误提示
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    /// 有效期（秒）
    #[prost(int64, tag = "4")]
    pub expired_in: i64,
}
/// =======================================
/// 🟢 用户上线消息（OnlineStatus）
/// =======================================
/// 表示某个用户刚刚上线，服务端可用于广播通知。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OnlineStatus {
    /// 上线用户 ID
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    /// 上线设备类型（如 mobile/web/pc）
    #[prost(enumeration = "DeviceType", tag = "2")]
    pub device_type: i32,
    /// 客户端实例 ID（可用于多端区分）
    #[prost(string, tag = "3")]
    pub client_id: ::prost::alloc::string::String,
    /// 上线时间戳（毫秒）
    #[prost(int64, tag = "4")]
    pub login_time: i64,
}
/// =======================================
/// 🔴 用户下线消息（OfflineStatus）
/// =======================================
/// 表示某个用户从某设备下线，服务端可用于状态同步或通知。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfflineStatus {
    /// 下线用户 ID
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    /// 下线设备类型（如 mobile/web/pc）
    #[prost(enumeration = "DeviceType", tag = "2")]
    pub device_type: i32,
    /// 客户端实例 ID（可用于多端区分）
    #[prost(string, tag = "3")]
    pub client_id: ::prost::alloc::string::String,
    /// 下线时间戳（毫秒）
    #[prost(int64, tag = "4")]
    pub logout_time: i64,
    /// 可选：下线原因，如超时、手动退出、被踢等
    #[prost(string, tag = "5")]
    pub reason: ::prost::alloc::string::String,
}
/// ================================
/// 📦 设备类型枚举
/// ================================
/// 用于标识客户端的来源类型，有助于服务端区分平台特性、限流策略等
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeviceType {
    /// 默认未知设备类型，建议作为兜底处理
    DeviceUnknown = 0,
    /// 移动端设备，如 Android / iOS 客户端
    Mobile = 1,
    /// 桌面应用程序，如 Electron、原生桌面端
    Desktop = 2,
    /// 浏览器 Web 客户端（H5）
    Web = 3,
}
impl DeviceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DeviceUnknown => "DEVICE_UNKNOWN",
            Self::Mobile => "MOBILE",
            Self::Desktop => "DESKTOP",
            Self::Web => "WEB",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEVICE_UNKNOWN" => Some(Self::DeviceUnknown),
            "MOBILE" => Some(Self::Mobile),
            "DESKTOP" => Some(Self::Desktop),
            "WEB" => Some(Self::Web),
            _ => None,
        }
    }
}
