// This file is @generated by prost-build.
/// =======================================
/// ✅ 消息已读回执（Read Receipt）
/// =======================================
/// 表示某条消息已被哪些用户阅读，适用于单聊或群聊消息同步场景。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadReceiptMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(uint64, optional, tag = "1")]
    pub message_id: ::core::option::Option<u64>,
    /// 已读该消息的用户 ID 列表（单聊为1，群聊可多）
    #[prost(string, repeated, tag = "2")]
    pub reader_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 首次被读的时间戳（毫秒）
    #[prost(int64, tag = "3")]
    pub read_time: i64,
}
/// =======================================
/// ✍️ 正在输入通知（Typing Notice）
/// =======================================
/// 表示某个用户正在对另一个用户/会话进行输入操作，适用于 UI "对方正在输入..." 提示。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypingNoticeMsg {
    /// 正在输入的用户 ID（发送方）
    #[prost(string, tag = "1")]
    pub from_uid: ::prost::alloc::string::String,
    /// 输入目标 ID（对方用户 ID 或群组 ID）
    #[prost(string, tag = "2")]
    pub to_uid: ::prost::alloc::string::String,
    /// 是否正在输入（true=开始输入, false=结束输入）
    #[prost(bool, tag = "3")]
    pub is_typing: bool,
    /// 通知发送的时间戳（毫秒）
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
}
/// =======================================
/// ❤️ 心跳包（Heartbeat）
/// =======================================
/// 用于维持客户端与服务器之间的长连接状态，客户端定时发送。
///
/// 心跳包通常不需要额外字段，仅用于保持连接活跃
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartbeatMsg {}
/// =======================================
/// 📨 ACK 确认消息（AckMessage）
/// =======================================
/// 用于确认收到某一封消息（包括聊天、系统等），支持链路追踪和可靠性保证。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AckMsg {
    /// 被确认接收的消息 ID
    #[prost(uint64, optional, tag = "1")]
    pub message_id: ::core::option::Option<u64>,
    /// 确认类型
    #[prost(enumeration = "super::super::common::ByteMessageType", tag = "2")]
    pub ack_type: i32,
}
