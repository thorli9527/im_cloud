// This file is @generated by prost-build.
/// ================================
/// 📦 好友事件消息结构
/// ================================
/// 用于客户端/服务端之间同步好友事件记录，包含完整的事件信息
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendEventMsg {
    /// 当前消息的唯一 ID，用于追踪、ACK 等
    #[prost(uint64, optional, tag = "1")]
    pub message_id: ::core::option::Option<u64>,
    /// 发起操作的用户 ID（如请求、删除、拉黑）：操作发起方
    #[prost(string, tag = "2")]
    pub from_uid: ::prost::alloc::string::String,
    /// 接收操作的目标用户 ID（如被请求、被拉黑）：操作接收方
    #[prost(string, tag = "3")]
    pub to_uid: ::prost::alloc::string::String,
    /// 当前事件的类型（请求/接受/拒绝等）：具体的事件类型
    #[prost(enumeration = "FriendEventType", tag = "4")]
    pub event_type: i32,
    /// 附加信息，如加好友请求附带备注、说明等：事件相关的文本信息
    #[prost(string, tag = "5")]
    pub message: ::prost::alloc::string::String,
    /// 当前事件的状态（待处理 / 已完成 / 已撤销）：事件处理状态
    #[prost(enumeration = "EventStatus", tag = "6")]
    pub status: i32,
    /// 事件创建时间（毫秒时间戳）：事件首次创建的时间
    #[prost(int64, tag = "7")]
    pub created_at: i64,
    /// 最近更新时间（如处理、撤销时间）：事件最后修改的时间
    #[prost(int64, tag = "8")]
    pub updated_at: i64,
    /// 添加来源类型（扫码/手机号/后台等）：好友关系的来源渠道
    #[prost(enumeration = "FriendSourceType", tag = "9")]
    pub source_type: i32,
}
/// ================================
/// 🤝 好友事件类型枚举
/// ================================
/// 表示好友关系变更的操作类型，通常用于请求加好友、拉黑、解除等社交关系变动。
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendEventType {
    /// 未知类型，默认占位（防止解析失败时崩溃）
    FriendEventUnknown = 0,
    /// 发起好友请求（from_uid → to_uid）：用户A向用户B发送好友申请
    FriendRequest = 1,
    /// 接受好友请求（to_uid 接受 from_uid）：用户B同意用户A的好友申请
    FriendAccept = 2,
    /// 拒绝好友请求（to_uid 拒绝 from_uid）：用户B拒绝用户A的好友申请
    FriendReject = 3,
    /// 删除好友（from_uid 主动删除 to_uid）：用户A主动删除用户B
    FriendRemove = 4,
    /// 拉黑好友（from_uid 屏蔽 to_uid，不再接收消息）：用户A拉黑用户B
    FriendBlock = 5,
    /// 取消拉黑（from_uid 解除对 to_uid 的屏蔽）：用户A取消对用户B的拉黑
    FriendUnblock = 6,
    /// 修改备注名（from_uid 修改自己对 to_uid 的备注名称）：用户A修改对用户B的备注
    FriendUpdateRemark = 7,
    /// 后台系统直接添加好友（跳过申请/确认流程）：系统强制添加好友关系
    FriendAddForce = 8,
}
impl FriendEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FriendEventUnknown => "FRIEND_EVENT_UNKNOWN",
            Self::FriendRequest => "FRIEND_REQUEST",
            Self::FriendAccept => "FRIEND_ACCEPT",
            Self::FriendReject => "FRIEND_REJECT",
            Self::FriendRemove => "FRIEND_REMOVE",
            Self::FriendBlock => "FRIEND_BLOCK",
            Self::FriendUnblock => "FRIEND_UNBLOCK",
            Self::FriendUpdateRemark => "FRIEND_UPDATE_REMARK",
            Self::FriendAddForce => "FRIEND_ADD_FORCE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_EVENT_UNKNOWN" => Some(Self::FriendEventUnknown),
            "FRIEND_REQUEST" => Some(Self::FriendRequest),
            "FRIEND_ACCEPT" => Some(Self::FriendAccept),
            "FRIEND_REJECT" => Some(Self::FriendReject),
            "FRIEND_REMOVE" => Some(Self::FriendRemove),
            "FRIEND_BLOCK" => Some(Self::FriendBlock),
            "FRIEND_UNBLOCK" => Some(Self::FriendUnblock),
            "FRIEND_UPDATE_REMARK" => Some(Self::FriendUpdateRemark),
            "FRIEND_ADD_FORCE" => Some(Self::FriendAddForce),
            _ => None,
        }
    }
}
/// ================================
/// 📥 好友添加来源类型
/// ================================
/// 表示用户是通过何种方式添加好友的，用于统计分析和风控判断
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendSourceType {
    /// 未知来源，默认占位（兼容性用途）
    FriendSourceUnknown = 0,
    /// 用户搜索账号添加：通过搜索用户ID或昵称添加
    FriendSourceSearch = 1,
    /// 扫码添加：扫描二维码添加好友
    FriendSourceQrcode = 2,
    /// 手机联系人添加：通过手机通讯录同步添加
    FriendSourcePhone = 3,
    /// 群组中点击添加：在群聊中点击用户头像添加
    FriendSourceGroup = 4,
    /// 系统后台添加（如客服、风控）：系统自动建立好友关系
    FriendSourceSystem = 5,
}
impl FriendSourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FriendSourceUnknown => "FRIEND_SOURCE_UNKNOWN",
            Self::FriendSourceSearch => "FRIEND_SOURCE_SEARCH",
            Self::FriendSourceQrcode => "FRIEND_SOURCE_QRCODE",
            Self::FriendSourcePhone => "FRIEND_SOURCE_PHONE",
            Self::FriendSourceGroup => "FRIEND_SOURCE_GROUP",
            Self::FriendSourceSystem => "FRIEND_SOURCE_SYSTEM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_SOURCE_UNKNOWN" => Some(Self::FriendSourceUnknown),
            "FRIEND_SOURCE_SEARCH" => Some(Self::FriendSourceSearch),
            "FRIEND_SOURCE_QRCODE" => Some(Self::FriendSourceQrcode),
            "FRIEND_SOURCE_PHONE" => Some(Self::FriendSourcePhone),
            "FRIEND_SOURCE_GROUP" => Some(Self::FriendSourceGroup),
            "FRIEND_SOURCE_SYSTEM" => Some(Self::FriendSourceSystem),
            _ => None,
        }
    }
}
/// ================================
/// 📌 好友事件状态枚举
/// ================================
/// 每个好友事件都具有生命周期状态，用于判断是否被处理
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EventStatus {
    /// 等待处理（如好友请求待接受）：事件已创建但尚未处理
    Pending = 0,
    /// 已处理完成（如已同意、已拒绝、已解除）：事件已被处理
    Done = 1,
    /// 已撤销（如申请主动取消、系统超时取消）：事件被取消或撤销
    Revoked = 2,
}
impl EventStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Pending => "PENDING",
            Self::Done => "DONE",
            Self::Revoked => "REVOKED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PENDING" => Some(Self::Pending),
            "DONE" => Some(Self::Done),
            "REVOKED" => Some(Self::Revoked),
            _ => None,
        }
    }
}
