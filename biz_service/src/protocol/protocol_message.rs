// This file is @generated by prost-build.
/// ======================================
/// 📨 顶层消息结构
/// ======================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    /// 唯一消息 ID（客户端生成或服务端补全）
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// 消息发送方
    #[prost(string, tag = "2")]
    pub sender_id: ::prost::alloc::string::String,
    /// 消息接收方（单聊为对方 ID，群聊为群 ID）
    #[prost(string, tag = "3")]
    pub receiver_id: ::prost::alloc::string::String,
    /// 消息发送时间（毫秒时间戳）
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
    /// 主消息类型（用于快速渲染判断）
    #[prost(enumeration = "super::common::MessageType", tag = "5")]
    pub message_type: i32,
    /// 消息所属会话类型（单聊/群聊）
    #[prost(enumeration = "ChatScene", tag = "6")]
    pub scene: i32,
    /// 多段复合内容（如文本 + 图片）
    #[prost(message, repeated, tag = "10")]
    pub contents: ::prost::alloc::vec::Vec<MessageContent>,
}
/// ======================================
/// 💠 消息内容结构（oneof 类型）
/// ======================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageContent {
    #[prost(
        oneof = "message_content::Content",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22"
    )]
    pub content: ::core::option::Option<message_content::Content>,
}
/// Nested message and enum types in `MessageContent`.
pub mod message_content {
    #[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(message, tag = "1")]
        Text(super::TextMessage),
        #[prost(message, tag = "2")]
        Image(super::ImageMessage),
        #[prost(message, tag = "3")]
        Audio(super::AudioMessage),
        #[prost(message, tag = "4")]
        Video(super::VideoMessage),
        #[prost(message, tag = "5")]
        Location(super::LocationMessage),
        #[prost(message, tag = "6")]
        File(super::FileMessage),
        #[prost(message, tag = "7")]
        AvCall(super::AvCallMessage),
        #[prost(message, tag = "8")]
        Custom(super::CustomMessage),
        #[prost(message, tag = "9")]
        Emoji(super::EmojiMessage),
        #[prost(message, tag = "10")]
        Revoke(super::RevokeMessage),
        #[prost(message, tag = "11")]
        Forward(super::ForwardMessage),
        #[prost(message, tag = "12")]
        Quote(super::QuoteMessage),
        #[prost(message, tag = "13")]
        Html(super::HtmlMessage),
        #[prost(message, tag = "14")]
        Voip(super::VoipMessage),
        #[prost(message, tag = "15")]
        Notification(super::NotificationMessage),
        #[prost(message, tag = "16")]
        System(super::SystemMessage),
        #[prost(message, tag = "17")]
        Reminder(super::ReminderMessage),
        #[prost(message, tag = "18")]
        FriendEvent(super::super::friend::FriendEventMessage),
        #[prost(message, tag = "19")]
        GroupEvent(super::GroupEventMessage),
        #[prost(message, tag = "20")]
        ContactCard(super::ContactCardMessage),
        #[prost(message, tag = "21")]
        Vote(super::VoteMessage),
        #[prost(message, tag = "22")]
        RedEnvelope(super::RedEnvelopeMessage),
    }
}
/// ===============================
/// 📄 文本消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextMessage {
    /// 文本主体内容
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    /// 富文本实体，如链接/@用户/话题
    #[prost(message, repeated, tag = "2")]
    pub entities: ::prost::alloc::vec::Vec<InlineEntity>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InlineEntity {
    /// 起始位置（UTF-8 字符索引）
    #[prost(int32, tag = "1")]
    pub start: i32,
    /// 结束位置（不含）
    #[prost(int32, tag = "2")]
    pub end: i32,
    /// 类型：link / mention / hashtag
    #[prost(string, tag = "3")]
    pub r#type: ::prost::alloc::string::String,
    /// 附加值：URL、用户ID等
    #[prost(string, tag = "4")]
    pub value: ::prost::alloc::string::String,
}
/// ===============================
/// 🖼️ 图片消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageMessage {
    /// 原图 URL
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    /// 缩略图 URL
    #[prost(string, tag = "2")]
    pub thumbnail_url: ::prost::alloc::string::String,
    /// 宽度（像素）
    #[prost(int32, tag = "3")]
    pub width: i32,
    /// 高度（像素）
    #[prost(int32, tag = "4")]
    pub height: i32,
    /// 格式（如 jpg/png）
    #[prost(string, tag = "5")]
    pub format: ::prost::alloc::string::String,
    /// 文件大小（字节）
    #[prost(int64, tag = "6")]
    pub size: i64,
}
/// ===============================
/// 🔊 音频消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AudioMessage {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub duration: i32,
    #[prost(string, tag = "3")]
    pub format: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub size: i64,
    /// 是否语音（vs 音乐类音频）
    #[prost(bool, tag = "5")]
    pub is_voice: bool,
}
/// ===============================
/// 🎞️ 视频消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoMessage {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub duration: i32,
    #[prost(string, tag = "3")]
    pub cover_url: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub width: i32,
    #[prost(int32, tag = "5")]
    pub height: i32,
    #[prost(string, tag = "6")]
    pub format: ::prost::alloc::string::String,
    #[prost(int64, tag = "7")]
    pub size: i64,
}
/// ===============================
/// 📍 位置消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocationMessage {
    #[prost(double, tag = "1")]
    pub latitude: f64,
    #[prost(double, tag = "2")]
    pub longitude: f64,
    #[prost(string, tag = "3")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub poi_name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub thumbnail_url: ::prost::alloc::string::String,
}
/// ===============================
/// 📁 文件消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileMessage {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub size: i64,
    #[prost(string, tag = "4")]
    pub file_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub icon_url: ::prost::alloc::string::String,
}
/// ===============================
/// 📞 音视频通话信令
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvCallMessage {
    #[prost(string, tag = "1")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub initiator_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub participant_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "av_call_message::CallAction", tag = "4")]
    pub action: i32,
    #[prost(enumeration = "av_call_message::CallType", tag = "5")]
    pub r#type: i32,
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
    #[prost(int32, tag = "7")]
    pub duration: i32,
}
/// Nested message and enum types in `AVCallMessage`.
pub mod av_call_message {
    #[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CallAction {
        Unknown = 0,
        Invite = 1,
        Accept = 2,
        Reject = 3,
        Cancel = 4,
        End = 5,
        Timeout = 6,
    }
    impl CallAction {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "UNKNOWN",
                Self::Invite => "INVITE",
                Self::Accept => "ACCEPT",
                Self::Reject => "REJECT",
                Self::Cancel => "CANCEL",
                Self::End => "END",
                Self::Timeout => "TIMEOUT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "INVITE" => Some(Self::Invite),
                "ACCEPT" => Some(Self::Accept),
                "REJECT" => Some(Self::Reject),
                "CANCEL" => Some(Self::Cancel),
                "END" => Some(Self::End),
                "TIMEOUT" => Some(Self::Timeout),
                _ => None,
            }
        }
    }
    #[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CallType {
        Audio = 0,
        Video = 1,
    }
    impl CallType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Audio => "AUDIO",
                Self::Video => "VIDEO",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "AUDIO" => Some(Self::Audio),
                "VIDEO" => Some(Self::Video),
                _ => None,
            }
        }
    }
}
/// ===============================
/// 💠 自定义结构化消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomMessage {
    #[prost(string, tag = "1")]
    pub custom_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub json_payload: ::prost::alloc::string::String,
}
/// ===============================
/// 😄 表情消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmojiMessage {
    #[prost(enumeration = "EmojiType", tag = "1")]
    pub emoji: i32,
    #[prost(string, tag = "2")]
    pub custom_emoji_url: ::prost::alloc::string::String,
}
/// ===============================
/// ⛔ 撤回消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeMessage {
    #[prost(string, tag = "1")]
    pub target_message_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub operator_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub revoke_time: i64,
}
/// ===============================
/// 📤 转发消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForwardMessage {
    #[prost(string, tag = "1")]
    pub original_message_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub original_sender_id: ::prost::alloc::string::String,
    #[prost(enumeration = "super::common::MessageType", tag = "3")]
    pub original_type: i32,
    #[prost(string, tag = "4")]
    pub summary: ::prost::alloc::string::String,
}
/// ===============================
/// 📌 引用回复消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuoteMessage {
    #[prost(string, tag = "1")]
    pub quoted_message_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quoted_content_preview: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub quote_text: ::prost::alloc::string::String,
}
/// ===============================
/// 🌐 HTML 卡片
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HtmlMessage {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub preview: ::prost::alloc::string::String,
}
/// ===============================
/// 📞 VOIP 通话记录
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoipMessage {
    #[prost(string, tag = "1")]
    pub caller_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub callee_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub duration: i64,
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
}
/// ===============================
/// 🔔 通知消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotificationMessage {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub body: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// ===============================
/// ⚙️ 系统消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemMessage {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
}
/// ===============================
/// ⏰ 提醒事项
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReminderMessage {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub remind_at: i64,
}
/// ===============================
/// 👪 群组事件
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupEventMessage {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub event: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub operator_id: ::prost::alloc::string::String,
}
/// ===============================
/// 📇 名片消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContactCardMessage {
    #[prost(string, tag = "1")]
    pub target_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub avatar_url: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub card_type: ::prost::alloc::string::String,
}
/// ===============================
/// 📊 投票消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoteMessage {
    #[prost(string, tag = "1")]
    pub topic: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub options: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, int32", tag = "3")]
    pub result: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(bool, tag = "4")]
    pub multi_choice: bool,
}
/// ===============================
/// 💰 红包消息
/// ===============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedEnvelopeMessage {
    #[prost(string, tag = "1")]
    pub sender_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub amount: i32,
    #[prost(string, tag = "3")]
    pub blessing: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub claimed: bool,
}
/// ======================================
/// ✂️ Segment - 消息段结构（用于复合内容）
/// ======================================
/// 表示一条消息中的一个独立段（如文本段、图片段等），支持排序、编辑、标记等
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Segment {
    /// 消息段内容（如文本、图片等，使用 oneof 封装）
    #[prost(message, optional, tag = "1")]
    pub body: ::core::option::Option<MessageContent>,
    /// 段唯一标识（客户端生成或服务端补全）
    #[prost(string, tag = "2")]
    pub segment_id: ::prost::alloc::string::String,
    /// 消息内顺序编号（用于前端渲染排序）
    #[prost(uint64, tag = "3")]
    pub seq_in_msg: u64,
    /// 是否为编辑后的段落（true 表示被修改）
    #[prost(bool, tag = "4")]
    pub edited: bool,
    /// 是否允许客户端渲染该段（false 可用于隐藏草稿等）
    #[prost(bool, tag = "5")]
    pub visible: bool,
    /// 通用扩展字段（以字符串键值对存储 JSON 扁平数据）
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// ======================================
/// 💬 会话场景类型
/// ======================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatScene {
    /// 默认未知场景（防御值）
    ChatUnknown = 0,
    /// 单人会话
    Single = 1,
    /// 群聊会话
    Group = 2,
}
impl ChatScene {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChatUnknown => "CHAT_UNKNOWN",
            Self::Single => "SINGLE",
            Self::Group => "GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_UNKNOWN" => Some(Self::ChatUnknown),
            "SINGLE" => Some(Self::Single),
            "GROUP" => Some(Self::Group),
            _ => None,
        }
    }
}
/// ======================================
/// 😄 Emoji 类型定义（标准 + 自定义）
/// ======================================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmojiType {
    EmojiUnknown = 0,
    Smile = 1,
    Grin = 2,
    Tears = 3,
    StuckOutTongue = 4,
    Clap = 25,
    Poop = 28,
    Heart = 21,
    /// ... 可继续扩展标准 Emoji
    ///
    /// 自定义表情（通过图片 URL 指定）
    CustomEmoji = 1000,
}
impl EmojiType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EmojiUnknown => "EMOJI_UNKNOWN",
            Self::Smile => "SMILE",
            Self::Grin => "GRIN",
            Self::Tears => "TEARS",
            Self::StuckOutTongue => "STUCK_OUT_TONGUE",
            Self::Clap => "CLAP",
            Self::Poop => "POOP",
            Self::Heart => "HEART",
            Self::CustomEmoji => "CUSTOM_EMOJI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EMOJI_UNKNOWN" => Some(Self::EmojiUnknown),
            "SMILE" => Some(Self::Smile),
            "GRIN" => Some(Self::Grin),
            "TEARS" => Some(Self::Tears),
            "STUCK_OUT_TONGUE" => Some(Self::StuckOutTongue),
            "CLAP" => Some(Self::Clap),
            "POOP" => Some(Self::Poop),
            "HEART" => Some(Self::Heart),
            "CUSTOM_EMOJI" => Some(Self::CustomEmoji),
            _ => None,
        }
    }
}
