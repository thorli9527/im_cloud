syntax = "proto3";
package protocol.auth;

// ================================
// 📦 设备类型枚举
// ================================
// 用于标识客户端的来源类型，有助于服务端区分平台特性、限流策略等
enum DeviceType {
  DEVICE_UNKNOWN = 0; // 默认未知设备类型，建议作为兜底处理
  MOBILE = 1;          // 移动端设备，如 Android / iOS 客户端
  DESKTOP = 2;         // 桌面应用程序，如 Electron、原生桌面端
  WEB = 3;             // 浏览器 Web 客户端（H5）
}

// ================================
// 🔐 客户端发起的认证请求消息
// ================================
message AuthRequest {
  string message_id = 1;     // 当前消息的唯一 ID，用于追踪、ACK 等
  string token = 2;          // 客户端的身份凭证（如登录后返回的 token 或 API key）
  string uid = 3;      // 客户端标识符，用于唯一标识连接源（可为设备 ID、UUID 等）
  string ip = 4;        //请求ip
  DeviceType device_type = 5; // 客户端设备类型，用于区分来源平台
}

// ================================
// 🛡️ 服务端返回的认证响应
// ================================
message AuthResponse {
  string message_id = 1;     // 响应对应的消息 ID（与请求中的保持一致）
  bool success = 2;          // 认证是否成功
  string message = 3;        // 额外提示信息，如错误原因或成功说明
}


// ========================================
// 📩 发送验证码请求
// ========================================
message SendVerificationCodeRequest {
  string message_id = 1;        // 唯一请求 ID（用于追踪或幂等处理）
  string receiver = 2;          // 接收目标（手机号或邮箱）
  string channel = 3;           // 渠道类型（如 sms / email / voice）
  string scene = 4;             // 场景标识（如 login / register / reset_pwd）
  string uid = 5;         // 客户端 ID 或设备标识（可用于风控）
}

// ========================================
// ✅ 发送验证码响应
// ========================================
message SendVerificationCodeResponse {
  string message_id = 1;        // 与请求一致的 ID
  bool success = 2;             // 是否发送成功
  string message = 3;           // 附加消息，如错误提示
  int64 expired_in = 4;         // 有效期（秒）
}

// =======================================
// 🟢 用户上线消息（OnlineStatus）
// =======================================
// 表示某个用户刚刚上线，服务端可用于广播通知。
message OnlineStatus {
  string user_id = 1;         // 上线用户 ID
  DeviceType device_type = 2;     // 上线设备类型（如 mobile/web/pc）
  string client_id = 3;       // 客户端实例 ID（可用于多端区分）
  int64 login_time = 4;       // 上线时间戳（毫秒）
}

// =======================================
// 🔴 用户下线消息（OfflineStatus）
// =======================================
// 表示某个用户从某设备下线，服务端可用于状态同步或通知。
message OfflineStatus {
  string user_id = 1;         // 下线用户 ID
  DeviceType device_type = 2;     // 下线设备类型（如 mobile/web/pc）
  string client_id = 3;       // 客户端实例 ID（可用于多端区分）
  int64 logout_time = 4;      // 下线时间戳（毫秒）
  string reason = 5;          // 可选：下线原因，如超时、手动退出、被踢等
}