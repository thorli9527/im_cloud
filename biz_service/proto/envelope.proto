syntax = "proto3";

package protocol.envelope;

// ================================
// 📦 引用各类消息模块
// ================================
import "auth.proto";     // 登录认证请求与响应
import "message.proto";  // 聊天消息结构
import "status.proto";   // 状态类消息，如已读、正在输入等
import "system.proto";   // 系统通知类消息
import "friend.proto";   // 好友关系变更相关消息
import "group.proto";    // 群组相关事件、结构
import "user.proto";     // 用户资料更新类结构

// ================================
// ✉️ 封包类型枚举
// ================================
// 用于标记封包方向/语义，便于服务端路由与客户端解析
enum EnvelopeType {
  CLIENT_TO_SERVER = 0; // 客户端 → 服务端请求消息（如发消息、认证等）
  SERVER_TO_CLIENT = 1; // 服务端 → 客户端推送（如通知、新消息等）
  ACK = 2;              // 客户端/服务端互相确认消息（用于可靠通信/追踪）
}

// ================================
// ✉️ 顶层消息封包结构 Envelope
// ================================
// 所有通信内容都通过 Envelope 封装发送，
// 支持多种消息载荷类型，便于统一协议、传输和扩展。
message Envelope {
  string envelope_id = 1;          // 封包唯一 ID（可用于链路追踪、日志定位）
  EnvelopeType envelope_type = 2; // 封包类型（CLIENT_TO_SERVER / SERVER_TO_CLIENT / ACK）
  int64 timestamp = 3;            // 封包创建时间戳（毫秒）

  // ================================
  // 📦 封装负载主体 oneof
  // ================================
  // 每个封包只包含一种消息类型，oneof 保证结构唯一性
  oneof payload {
    // 🔐 登录认证
    auth.AuthRequest auth_request = 4;     // 客户端发起认证请求（连接建立后第一步）
    auth.AuthResponse auth_response = 5;   // 服务端返回认证结果

    // 💬 聊天消息
    message.Message message = 6;              // 普通消息：文本、图片、引用等

    // 🧾 消息状态类
    status.ReadReceipt read_receipt = 7;     // 消息已读回执（单聊或群聊）
    status.TypingNotice typing_notice = 9;   // 正在输入状态通知
    status.AckMessage ack = 12;              // 通用 ACK 确认消息
    status.Heartbeat heartbeat = 13;         // 心跳包（连接保活）

    // 🛠️ 系统通知
    system.SystemNotification system_notification = 8; // 系统通知消息（维护、封禁等）

    // 🤝 好友事件类
    friend.FriendEventMessage friend_event = 14;       // 好友请求、同意、拒绝、拉黑等事件

    // 👤 用户/群组变更事件
    user.UserFlush user_flush = 15;                  // 用户资料更新通知（昵称、头像等变更）
    // 👥 群组结构事件
    gi.GroupMemberChange group_member_change = 10;     // 群成员增删、禁言、踢人等
    gi.GroupAttributeChange group_attribute_change = 11; // 群属性字段变更（单字段）

    gi.GroupCreateMessage group_create = 17;           // 创建群聊成功事件
    gi.GroupDismissMessage group_dismiss = 18;         // 群聊被解散通知
    gi.GroupTransferMessage group_transfer = 19;       // 群主转让事件
    gi.GroupAnnouncementMessage group_announcement = 20; // 群公告更新事件
  }
}
