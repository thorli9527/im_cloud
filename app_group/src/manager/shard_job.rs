use crate::manager;
use crate::manager::shard_manager;
use crate::manager::shard_manager::{ShardManager, GROUP_SHARD_SIZE};
use crate::protocol::rpc_arb_group::arb_group_service_client::ArbGroupServiceClient;
use crate::protocol::rpc_arb_group::arb_group_service_server::ArbGroupServiceServer;
use crate::protocol::rpc_arb_server::arb_server_rpc_service_client::ArbServerRpcServiceClient;
use crate::service::rpc::group_rpc_service_impl::GroupRpcServiceImpl;
use common::config::{AppConfig, ShardConfig};
use common::util::common_utils::hash_index;
use common::{GroupId, UserId};
use dashmap::{DashMap, DashSet};
use std::collections::HashMap;
use std::sync::Arc;
use std::thread::current;
use tokio::sync::Mutex;
use tokio::task::JoinHandle;
use tokio_util::sync::CancellationToken;
use tonic::async_trait;
use tonic::transport::Channel;

pub struct ArbManagerJob {
    //ÂàÜÁâá‰ª≤Ë£ÅÊúçÂä°Âô®Êé•Âè£‰ø°ÊÅØ
    pub arb_client: Option<ArbServerRpcServiceClient<Channel>>,
    pub shard_address: String,
    pub server_host: String,
    pub cancel_token: CancellationToken,
    pub heartbeat_handle: Option<JoinHandle<()>>,
}
impl ArbManagerJob {
    pub fn new() -> Self {
        let config = AppConfig::get().clone().shard.clone().unwrap();
        Self {
            arb_client: None,
            shard_address: config.shard_address.unwrap(),
            server_host: config.server_host.unwrap(),
            cancel_token: CancellationToken::new(),
            heartbeat_handle: None,
        }
    }

    /// ÂêØÂä®ÂøÉË∑≥ÂíåÁîüÂëΩÂë®Êúü‰ªªÂä°
    pub async fn start(&mut self) -> () {
        self.register_node().await.expect("register node error");
        self.change_preparing()
            .await
            .expect("change preparing error");
        self.change_migrating()
            .await
            .expect("change migrating error");
        self.sync_data().await.expect("sync groups error");
        self.change_ready().await.expect("change ready error");
        self.change_normal().await.expect("change normal error");
        self.start_heartbeat_loop();
    }

    /// ÂÅúÊ≠¢ÊâÄÊúâ‰ªªÂä°
    pub fn stop(&self) {}
    pub async fn init_arb_client(
        &mut self,
    ) -> anyhow::Result<&mut ArbServerRpcServiceClient<Channel>> {
        if self.arb_client.is_none() {
            let node_addr = self.server_host.clone();
            let client =
                ArbServerRpcServiceClient::connect(format!("http://{}", node_addr)).await?;
            self.arb_client = Some(client);
        }
        Ok(self.arb_client.as_mut().unwrap())
    }
    pub async fn init_grpc_clients(
        &self,
        endpoints: Vec<String>,
    ) -> Result<HashMap<i32, ArbGroupServiceClient<Channel>>, Box<dyn std::error::Error>> {
        let mut clients = HashMap::new();
        let size = endpoints.len();
        for endpoint in endpoints {
            //Ë∑≥ËøáËá™Âä®ËäÇÁÇπ
            if endpoint == self.shard_address {
                continue;
            }
            let channel = Channel::from_shared(format!("http://{}", endpoint))?
                .connect()
                .await?;
            let client = ArbGroupServiceClient::new(channel);
            clients.insert(hash_index(&endpoint, size as i32), client);
        }
        Ok(clients)
    }

    fn start_heartbeat_loop(&mut self) {
        let cancel_token = self.cancel_token.clone();
        let mut this = self.clone_light(); // üëà ÂÖãÈöÜÂøÖË¶ÅÂ≠óÊÆµ‰ª•ÈÅøÂÖçÂÄüÁî®ÂÜ≤Á™Å

        self.heartbeat_handle = Some(tokio::spawn(async move {
            let interval = std::time::Duration::from_secs(10);
            loop {
                tokio::select! {
                    _ = cancel_token.cancelled() => {
                        log::info!("üõë ÂøÉË∑≥‰ªªÂä°Â∑≤ÂèñÊ∂à");
                        break;
                    }
                    _ = tokio::time::sleep(interval) => {
                        if let Err(e) = this.heartbeat().await {
                            log::warn!("‚ö†Ô∏è ÂøÉË∑≥Â§±Ë¥•: {:?}", e);
                        } else {
                            log::debug!("‚ù§Ô∏è ÂøÉË∑≥ÂèëÈÄÅÊàêÂäü");
                        }
                    }
                }
            }
        }));
    }

    // ËΩªÈáè cloneÔºåÂè™ÂÖãÈöÜÈùûËøûÊé•Â≠óÊÆµ
    fn clone_light(&self) -> ArbManagerJob {
        ArbManagerJob {
            arb_client: None, // ÈÅøÂÖç tonic ÂÆ¢Êà∑Á´ØË∑®Á∫øÁ®ãÈóÆÈ¢ò
            shard_address: self.shard_address.clone(),
            server_host: self.server_host.clone(),
            cancel_token: self.cancel_token.clone(),
            heartbeat_handle: None,
        }
    }
}

#[async_trait]
/// ÂàÜÁâáÁÆ°ÁêÜÂô®Ê†∏ÂøÉÊìç‰ΩúÂÆö‰πâÊé•Âè£ÔºåÈÄÇÁî®‰∫éÊîØÊåÅÂä®ÊÄÅËøÅÁßª„ÄÅÂÅ•Â∫∑‰∏äÊä•„ÄÅÁä∂ÊÄÅÂàáÊç¢ÁöÑÂàÜÂ∏ÉÂºèÁæ§ÁªÑÊúçÂä°„ÄÇ
pub trait ManagerJobOpt: Send + Sync {
    /// ÂàùÂßãÂåñÁÆ°ÁêÜÂô®Ôºà‰æãÂ¶ÇÂä†ËΩΩÁºìÂ≠ò„ÄÅËøûÊé•‰ª≤Ë£ÅÂô®„ÄÅÈ¢ÑÊãâÂèñÂàÜÁâá‰ø°ÊÅØÁ≠âÔºâ
    async fn init(&mut self) -> anyhow::Result<()>;

    /// Ê≥®ÂÜåÂΩìÂâçËäÇÁÇπÂà∞‰ª≤Ë£Å‰∏≠ÂøÉÊàñÊ≥®ÂÜåÊúçÂä°ÔºåÁî®‰∫éÂàùÂßãÊé•ÂÖ•ÂíåË¥üËΩΩË∞ÉÂ∫¶ËØÜÂà´
    async fn register_node(&mut self) -> anyhow::Result<()>;
    /// ËÆæÁΩÆÊüêÁæ§ÁªÑËøÅÁßªÁä∂ÊÄÅ‰∏∫‚ÄúÂáÜÂ§á‰∏≠‚Äù
    /// Ë°®Á§∫ÁõÆÊ†áËäÇÁÇπÂ∑≤ÂáÜÂ§áÂ•ΩÊé•Êî∂Áæ§ÁªÑÔºà‰æãÂ¶ÇÁºìÂ≠òÂáÜÂ§á„ÄÅÊ†°È™åÂÆåÊàêÁ≠âÔºâ
    async fn change_preparing(&mut self) -> anyhow::Result<()>;
    /// Â∞ÜÁæ§ÁªÑÂàÜÁâáÁä∂ÊÄÅËÆæÁΩÆ‰∏∫‚ÄúËøÅÁßª‰∏≠‚Äù
    /// ÈÄöÂ∏∏ÊÑèÂë≥ÁùÄ‰∏çÂÜçÊé•ÂèóÊñ∞ÂÜôÂÖ•ÔºåÂêåÊó∂ÂáÜÂ§áÊï∞ÊçÆËΩ¨Áßª
    async fn change_migrating(&mut self) -> anyhow::Result<()>;
    /// ÂêåÊ≠•ÂΩìÂâçÁæ§ÁªÑÂàóË°®ÔºàÈÄöÂ∏∏‰ªé‰ª≤Ë£ÅÊúçÂä°Êàñ‰∏≠ÂøÉËäÇÁÇπÊãâÂèñÊúÄÊñ∞Áæ§ÁªÑÂàÜÈÖçÊÉÖÂÜµÔºâ
    async fn sync_data(&mut self) -> anyhow::Result<()>;
    /// ËÆæÁΩÆÁæ§ÁªÑÁä∂ÊÄÅ‰∏∫‚ÄúËøÅÁßªÂ§±Ë¥•‚Äù
    /// ÂèØÁî®‰∫éÂõûÊªöÊìç‰ΩúÊàñËß¶ÂèëÂºÇÂ∏∏ËøÅÁßªÈáçËØïÈÄªËæë
    async fn change_failed(&mut self) -> anyhow::Result<()>;

    /// ËÆæÁΩÆ‰∏∫‚ÄúÂ∞±Áª™‚ÄùÁä∂ÊÄÅÔºåË°®Á§∫ÁõÆÊ†áËäÇÁÇπÂ∑≤Êé•ÁÆ°Êï∞ÊçÆÂπ∂ÂèØÊøÄÊ¥ªÁæ§ÁªÑ
    async fn change_ready(&mut self) -> anyhow::Result<()>;

    /// ËÆæÁΩÆ‰∏∫‚ÄúÊ≠£Â∏∏‚ÄùÁä∂ÊÄÅÔºåË°®Á§∫Áæ§ÁªÑÂ∑≤ÂÆåÊàêËøÅÁßªÂπ∂Á®≥ÂÆöËøêË°å
    async fn change_normal(&mut self) -> anyhow::Result<()>;
    ///ÂáÜÂ§á‰∏ãÁ∫ø
    async fn change_preparing_offline(&mut self) -> anyhow::Result<()>;
    /// ËäÇÁÇπ‰∏ãÁ∫ø
    async fn change_offline(&mut self) -> anyhow::Result<()>;
    /// Âêë‰ª≤Ë£ÅÊúçÂä°‰∏äÊä•ÂøÉË∑≥‰ø°ÊÅØÔºàÂåÖÊã¨Ë¥üËΩΩ„ÄÅÂàÜÁâáÂàóË°®Á≠âÔºâÔºåÁî®‰∫éËäÇÁÇπÂÅ•Â∫∑Ê£ÄÊü•
    async fn heartbeat(&mut self) -> anyhow::Result<()>;
}
