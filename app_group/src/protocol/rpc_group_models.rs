// This file is @generated by prost-build.
/// *
/// 通用响应结构
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonResp {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 错误或提示信息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// *
/// 群标签信息
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TagInfo {
    /// 标签唯一ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 标签名称
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 标签说明
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// 可选颜色代码（如 "#FF0000"）
    #[prost(string, tag = "4")]
    pub color: ::prost::alloc::string::String,
}
/// *
/// 群组基本信息（用于展示和配置）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupInfo {
    /// 群组唯一ID（由系统生成）
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 群组名称（用户可见）
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 群头像URL
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介（支持富文本）
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// 群公告（群成员可见）
    #[prost(string, tag = "5")]
    pub notice: ::prost::alloc::string::String,
    /// 群标签（英文逗号分隔）
    #[prost(string, tag = "6")]
    pub tags: ::prost::alloc::string::String,
    /// 加群权限控制
    #[prost(enumeration = "JoinPermission", tag = "7")]
    pub join_permission: i32,
    /// 是否允许通过搜索找到
    #[prost(bool, tag = "8")]
    pub allow_search: bool,
    /// 验证方式类型
    #[prost(enumeration = "JoinQuestionType", tag = "9")]
    pub join_question_mode: i32,
    /// 加群题目（QUESTION 模式）
    #[prost(string, repeated, tag = "10")]
    pub join_questions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 正确答案（内部验证）
    #[prost(string, tag = "11")]
    pub join_question_answer: ::prost::alloc::string::String,
    /// 邀请码
    #[prost(string, tag = "12")]
    pub join_code: ::prost::alloc::string::String,
    /// 邀请码校验值
    #[prost(string, tag = "13")]
    pub join_code_answer: ::prost::alloc::string::String,
}
/// *
/// 群组成员详细信息
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupMemInfo {
    /// 成员记录ID（内部持久化用）
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 所属群组ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// 用户唯一ID
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    /// 群内别名 / 昵称
    #[prost(string, tag = "4")]
    pub alias: ::prost::alloc::string::String,
    /// 成员角色
    #[prost(enumeration = "GroupRoleType", tag = "5")]
    pub role: i32,
    /// 是否禁言中（true=被禁言）
    #[prost(bool, tag = "6")]
    pub is_muted: bool,
    /// 成员头像URL（前端展示用）
    #[prost(string, tag = "7")]
    pub avatar: ::prost::alloc::string::String,
}
/// *
/// 创建群组请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupReq {
    /// 可选自定义群ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 群名称
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 群头像URL
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// 创建者用户ID
    #[prost(string, tag = "5")]
    pub creator_id: ::prost::alloc::string::String,
    /// 初始成员用户ID列表
    #[prost(string, repeated, tag = "6")]
    pub member_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 指定群主ID（可与创建者不同）
    #[prost(string, tag = "7")]
    pub owner_id: ::prost::alloc::string::String,
    /// 是否需要审核加入
    #[prost(bool, tag = "8")]
    pub need_approval: bool,
    /// 是否允许通过搜索加入
    #[prost(bool, tag = "9")]
    pub allow_search: bool,
}
/// *
/// 解散群组请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestroyGroupReq {
    /// 群组ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
/// *
/// 更新群组信息请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGroupInfoReq {
    /// 群组ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 群名称
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 群头像
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    /// 群简介
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// 群公告
    #[prost(string, tag = "5")]
    pub notice: ::prost::alloc::string::String,
    /// 群标签（英文逗号分隔）
    #[prost(string, tag = "6")]
    pub tags: ::prost::alloc::string::String,
    /// 加群权限
    #[prost(enumeration = "JoinPermission", tag = "7")]
    pub join_permission: i32,
    /// 是否可被搜索
    #[prost(bool, tag = "8")]
    pub allow_search: bool,
    /// 验证方式
    #[prost(enumeration = "JoinQuestionType", tag = "9")]
    pub join_question_mode: i32,
    /// 验证问题
    #[prost(string, repeated, tag = "10")]
    pub join_questions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 答案
    #[prost(string, tag = "11")]
    pub join_question_answer: ::prost::alloc::string::String,
    /// 邀请码
    #[prost(string, tag = "12")]
    pub join_code: ::prost::alloc::string::String,
    /// 验证码校验值
    #[prost(string, tag = "13")]
    pub join_code_answer: ::prost::alloc::string::String,
}
/// *
/// 获取群组信息请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupInfoReq {
    /// 群组ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
/// *
/// 获取群组信息响应
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupInfoRep {
    /// 群ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 名称
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 头像URL
    #[prost(string, tag = "3")]
    pub avatar: ::prost::alloc::string::String,
    /// 简介
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// 创建者UID
    #[prost(string, tag = "5")]
    pub creator_id: ::prost::alloc::string::String,
    /// 群成员信息列表
    #[prost(message, repeated, tag = "6")]
    pub members: ::prost::alloc::vec::Vec<GroupMemInfo>,
}
/// *
/// 添加成员请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddMemberReq {
    /// 群ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 成员信息
    #[prost(message, repeated, tag = "2")]
    pub members: ::prost::alloc::vec::Vec<GroupMemInfo>,
}
/// *
/// 移除成员请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveMemberReq {
    /// 群ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 用户UID列表
    #[prost(string, repeated, tag = "2")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// *
/// 用户主动退出群组请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExitGroupReq {
    /// 群ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 当前用户UID
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
}
/// *
/// 更改群成员角色请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeMemberRoleReq {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    /// 新角色
    #[prost(enumeration = "GroupRoleType", tag = "3")]
    pub role: i32,
}
/// *
/// 禁言/取消禁言成员
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MuteMemberReq {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    /// true=禁言，false=取消禁言
    #[prost(bool, tag = "3")]
    pub status: bool,
}
/// *
/// 修改成员别名请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeMemberAliasReq {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub alias: ::prost::alloc::string::String,
}
/// *
/// 转让群主请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferGroupOwnershipReq {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_owner_uid: ::prost::alloc::string::String,
}
/// *
/// 用户上线请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OnlineReq {
    /// 用户ID
    #[prost(string, tag = "1")]
    pub uid: ::prost::alloc::string::String,
    /// 所属群组ID
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
}
/// *
/// 用户离线请求
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfflineReq {
    #[prost(string, tag = "1")]
    pub uid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
}
/// *
/// 获取在线成员请求（分页）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOnlineMembersReq {
    /// 群ID
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// 页码（从1开始）
    #[prost(int32, tag = "2")]
    pub page: i32,
    /// 每页条数
    #[prost(int32, tag = "3")]
    pub page_size: i32,
}
/// *
/// 获取在线成员响应
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOnlineMembersResp {
    /// 在线UID列表
    #[prost(string, repeated, tag = "1")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 在线总人数
    #[prost(int32, tag = "2")]
    pub total_count: i32,
    /// 是否成功
    #[prost(bool, tag = "3")]
    pub success: bool,
    /// 错误提示
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
/// *
/// 获取所有成员请求（分页）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMembersReq {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page: i32,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
}
/// *
/// 获取所有成员响应
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMembersRep {
    /// 成员UID列表
    #[prost(string, repeated, tag = "1")]
    pub uids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// 总人数
    #[prost(int32, tag = "2")]
    pub total_count: i32,
    #[prost(bool, tag = "3")]
    pub success: bool,
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
/// *
/// 群成员角色类型
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GroupRoleType {
    /// 群主（拥有最高权限）
    Owner = 0,
    /// 管理员（具备部分管理权限）
    Admin = 1,
    /// 普通成员
    Member = 2,
}
impl GroupRoleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Owner => "OWNER",
            Self::Admin => "ADMIN",
            Self::Member => "MEMBER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OWNER" => Some(Self::Owner),
            "ADMIN" => Some(Self::Admin),
            "MEMBER" => Some(Self::Member),
            _ => None,
        }
    }
}
/// *
/// 加群权限控制类型
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JoinPermission {
    /// 任何人都可加入
    Anyone = 0,
    /// 加群需审批
    NeedApproval = 1,
    /// 仅允许通过邀请加入
    InviteOnly = 2,
    /// 不允许加入
    Closed = 3,
}
impl JoinPermission {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Anyone => "ANYONE",
            Self::NeedApproval => "NEED_APPROVAL",
            Self::InviteOnly => "INVITE_ONLY",
            Self::Closed => "CLOSED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ANYONE" => Some(Self::Anyone),
            "NEED_APPROVAL" => Some(Self::NeedApproval),
            "INVITE_ONLY" => Some(Self::InviteOnly),
            "CLOSED" => Some(Self::Closed),
            _ => None,
        }
    }
}
/// *
/// 加群验证类型
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JoinQuestionType {
    /// 无验证
    None = 0,
    /// 答题验证
    Question = 1,
    /// 验证码验证
    Captcha = 2,
    /// 邀请码验证
    InviteCode = 3,
}
impl JoinQuestionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::Question => "QUESTION",
            Self::Captcha => "CAPTCHA",
            Self::InviteCode => "INVITE_CODE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "QUESTION" => Some(Self::Question),
            "CAPTCHA" => Some(Self::Captcha),
            "INVITE_CODE" => Some(Self::InviteCode),
            _ => None,
        }
    }
}
/// *
/// 标签类型
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TagType {
    /// 公共标签
    Group = 0,
    /// 私有标签，仅当前用户可见
    Single = 1,
}
impl TagType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Group => "GROUP",
            Self::Single => "SINGLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROUP" => Some(Self::Group),
            "SINGLE" => Some(Self::Single),
            _ => None,
        }
    }
}
