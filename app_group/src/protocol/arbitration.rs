// This file is @generated by prost-build.
/// 基础请求，仅包含节点地址
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BaseRequest {
    /// 节点地址（如 192.168.1.10:9000）
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
}
/// 通用响应结构（统一 success + message）
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// ============================
/// 分片节点元信息
/// ============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShardNodeInfo {
    /// 所属节点地址
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    /// 当前版本号（用于 CAS 检查）
    #[prost(uint64, tag = "2")]
    pub version: u64,
    /// 当前状态
    #[prost(enumeration = "ShardState", tag = "3")]
    pub state: i32,
    /// 最后更新时间戳（毫秒）
    #[prost(uint64, tag = "4")]
    pub last_update_time: u64,
}
/// ============================
/// 请求结构：更新分片状态
/// ============================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateShardStateRequest {
    #[prost(string, tag = "1")]
    pub node_addr: ::prost::alloc::string::String,
    #[prost(enumeration = "ShardState", tag = "2")]
    pub new_state: i32,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListShardNodesResponse {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<ShardNodeInfo>,
}
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAllNodesResponse {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<ShardNodeInfo>,
}
/// =====================
/// 枚举：分片节点状态定义
/// =====================
#[derive(serde::Serialize, serde::Deserialize, utoipa::ToSchema)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShardState {
    /// 未指定状态（默认值）
    Unspecified = 0,
    /// 分片正常运行中
    Normal = 1,
    /// 正在迁移（目标节点未确认接管）
    Migrating = 2,
    /// 异常（节点宕机或下线，待仲裁）
    Failed = 3,
    /// 接管准备阶段
    Preparing = 4,
    /// 可切换 owner
    Ready = 5,
    /// 节点主动下线，该分片不再调度
    Offline = 6,
    /// 节点准备下线，等待数据迁移或状态确认
    PreparingOffline = 7,
}
impl ShardState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "UNSPECIFIED",
            Self::Normal => "NORMAL",
            Self::Migrating => "MIGRATING",
            Self::Failed => "FAILED",
            Self::Preparing => "PREPARING",
            Self::Ready => "READY",
            Self::Offline => "OFFLINE",
            Self::PreparingOffline => "PREPARING_OFFLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED" => Some(Self::Unspecified),
            "NORMAL" => Some(Self::Normal),
            "MIGRATING" => Some(Self::Migrating),
            "FAILED" => Some(Self::Failed),
            "PREPARING" => Some(Self::Preparing),
            "READY" => Some(Self::Ready),
            "OFFLINE" => Some(Self::Offline),
            "PREPARING_OFFLINE" => Some(Self::PreparingOffline),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod arbiter_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ============================
    /// 仲裁服务接口定义
    /// ============================
    #[derive(Debug, Clone)]
    pub struct ArbiterServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ArbiterServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ArbiterServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ArbiterServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ArbiterServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// === 分片管理 ===
        pub async fn get_shard_node(
            &mut self,
            request: impl tonic::IntoRequest<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::ShardNodeInfo>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arbitration.ArbiterService/GetShardNode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("arbitration.ArbiterService", "GetShardNode"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_shard_state(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateShardStateRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arbitration.ArbiterService/UpdateShardState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("arbitration.ArbiterService", "UpdateShardState"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// === 节点注册与生命周期 ===
        pub async fn register_node(
            &mut self,
            request: impl tonic::IntoRequest<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arbitration.ArbiterService/RegisterNode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("arbitration.ArbiterService", "RegisterNode"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_all_nodes(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ListAllNodesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arbitration.ArbiterService/ListAllNodes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("arbitration.ArbiterService", "ListAllNodes"));
            self.inner.unary(req, path, codec).await
        }
        /// === 节点状态与控制 ===
        pub async fn graceful_leave(
            &mut self,
            request: impl tonic::IntoRequest<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arbitration.ArbiterService/GracefulLeave",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("arbitration.ArbiterService", "GracefulLeave"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::BaseRequest>,
        ) -> std::result::Result<tonic::Response<super::CommonResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/arbitration.ArbiterService/heartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("arbitration.ArbiterService", "heartbeat"));
            self.inner.unary(req, path, codec).await
        }
    }
}
